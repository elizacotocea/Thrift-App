/** Autogenerated by Thrift Compiler(0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;
using model;

namespace client
{
    class AppService
    {
        public interface ISync
        {
            string login(string username, string password, string host, int port);
            List<ShowDTO> findAllShows();
            void ticketsSold(ShowDTO showDTO, TicketDTO ticketDTO);
            string logOut(string username, string host, int port);
        }

        public interface Iface : ISync
        {
#if SILVERLIGHT
    IAsyncResult Begin_login(AsyncCallback callback, object state, string username, string password, string host, int port);
    string End_login(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
    IAsyncResult Begin_findAllShows(AsyncCallback callback, object state);
    List<ShowDTO> End_findAllShows(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
    IAsyncResult Begin_ticketsSold(AsyncCallback callback, object state, ShowDTO showDTO, TicketDTO ticketDTO);
    void End_ticketsSold(IAsyncResult asyncResult);
#endif
#if SILVERLIGHT
    IAsyncResult Begin_logOut(AsyncCallback callback, object state, string username, string host, int port);
    string End_logOut(IAsyncResult asyncResult);
#endif
        }

        public class Client : IDisposable, Iface
        {
            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol
            {
                get { return iprot_; }
            }
            public TProtocol OutputProtocol
            {
                get { return oprot_; }
            }


            #region " IDisposable Support "
            private bool _IsDisposed;

            // IDisposable
            public void Dispose()
            {
                Dispose(true);
            }


            protected virtual void Dispose(bool disposing)
            {
                if (!_IsDisposed)
                {
                    if (disposing)
                    {
                        if (iprot_ != null)
                        {
                            ((IDisposable)iprot_).Dispose();
                        }
                        if (oprot_ != null)
                        {
                            ((IDisposable)oprot_).Dispose();
                        }
                    }
                }
                _IsDisposed = true;
            }
            #endregion



#if SILVERLIGHT
    
    public IAsyncResult Begin_login(AsyncCallback callback, object state, string username, string password, string host, int port)
    {
      return send_login(callback, state, username, password, host, port);
    }

    public string End_login(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_login();
    }

#endif

            public string login(string username, string password, string host, int port)
            {
#if SILVERLIGHT
      var asyncResult = Begin_login(null, null, username, password, host, port);
      return End_login(asyncResult);

#else
                send_login(username, password, host, port);
                return recv_login();

#endif
            }
#if SILVERLIGHT
    public IAsyncResult send_login(AsyncCallback callback, object state, string username, string password, string host, int port)
    {
      oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
      login_args args = new login_args();
      args.Username = username;
      args.Password = password;
      args.Host = host;
      args.Port = port;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

#else

            public void send_login(string username, string password, string host, int port)
            {
                oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
                login_args args = new login_args();
                args.Username = username;
                args.Password = password;
                args.Host = host;
                args.Port = port;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public string recv_login()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                login_result result = new login_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
            }


#if SILVERLIGHT
    
    public IAsyncResult Begin_findAllShows(AsyncCallback callback, object state)
    {
      return send_findAllShows(callback, state);
    }

    public List<ShowDTO> End_findAllShows(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findAllShows();
    }

#endif

            public List<ShowDTO> findAllShows()
            {
#if SILVERLIGHT
      var asyncResult = Begin_findAllShows(null, null);
      return End_findAllShows(asyncResult);

#else
                send_findAllShows();
                return recv_findAllShows();

#endif
            }
#if SILVERLIGHT
    public IAsyncResult send_findAllShows(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("findAllShows", TMessageType.Call, seqid_));
      findAllShows_args args = new findAllShows_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

#else

            public void send_findAllShows()
            {
                oprot_.WriteMessageBegin(new TMessage("findAllShows", TMessageType.Call, seqid_));
                findAllShows_args args = new findAllShows_args();
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public List<ShowDTO> recv_findAllShows()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                findAllShows_result result = new findAllShows_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAllShows failed: unknown result");
            }


#if SILVERLIGHT
    
    public IAsyncResult Begin_ticketsSold(AsyncCallback callback, object state, ShowDTO showDTO, TicketDTO ticketDTO)
    {
      return send_ticketsSold(callback, state, showDTO, ticketDTO);
    }

    public void End_ticketsSold(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_ticketsSold();
    }

#endif

            public void ticketsSold(ShowDTO showDTO, TicketDTO ticketDTO)
            {
#if SILVERLIGHT
      var asyncResult = Begin_ticketsSold(null, null, showDTO, ticketDTO);
      End_ticketsSold(asyncResult);

#else
                send_ticketsSold(showDTO, ticketDTO);
                recv_ticketsSold();

#endif
            }
#if SILVERLIGHT
    public IAsyncResult send_ticketsSold(AsyncCallback callback, object state, ShowDTO showDTO, TicketDTO ticketDTO)
    {
      oprot_.WriteMessageBegin(new TMessage("ticketsSold", TMessageType.Call, seqid_));
      ticketsSold_args args = new ticketsSold_args();
      args.ShowDTO = showDTO;
      args.TicketDTO = ticketDTO;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

#else

            public void send_ticketsSold(ShowDTO showDTO, TicketDTO ticketDTO)
            {
                oprot_.WriteMessageBegin(new TMessage("ticketsSold", TMessageType.Call, seqid_));
                ticketsSold_args args = new ticketsSold_args();
                args.ShowDTO = showDTO;
                args.TicketDTO = ticketDTO;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public void recv_ticketsSold()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                ticketsSold_result result = new ticketsSold_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                return;
            }


#if SILVERLIGHT
    
    public IAsyncResult Begin_logOut(AsyncCallback callback, object state, string username, string host, int port)
    {
      return send_logOut(callback, state, username, host, port);
    }

    public string End_logOut(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_logOut();
    }

#endif

            public string logOut(string username, string host, int port)
            {
#if SILVERLIGHT
      var asyncResult = Begin_logOut(null, null, username, host, port);
      return End_logOut(asyncResult);

#else
                send_logOut(username, host, port);
                return recv_logOut();

#endif
            }
#if SILVERLIGHT
    public IAsyncResult send_logOut(AsyncCallback callback, object state, string username, string host, int port)
    {
      oprot_.WriteMessageBegin(new TMessage("logOut", TMessageType.Call, seqid_));
      logOut_args args = new logOut_args();
      args.Username = username;
      args.Host = host;
      args.Port = port;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

#else

            public void send_logOut(string username, string host, int port)
            {
                oprot_.WriteMessageBegin(new TMessage("logOut", TMessageType.Call, seqid_));
                logOut_args args = new logOut_args();
                args.Username = username;
                args.Host = host;
                args.Port = port;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
                oprot_.Transport.Flush();
            }
#endif

            public string recv_logOut()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    throw x;
                }
                logOut_result result = new logOut_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "logOut failed: unknown result");
            }

        }
        public class Processor : TProcessor
        {
            public Processor(ISync iface)
            {
                iface_ = iface;
                processMap_["login"] = login_Process;
                processMap_["findAllShows"] = findAllShows_Process;
                processMap_["ticketsSold"] = ticketsSold_Process;
                processMap_["logOut"] = logOut_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private ISync iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                login_args args = new login_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                login_result result = new login_result();
                try
                {
                    result.Success = iface_.login(args.Username, args.Password, args.Host, args.Port);
                    oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("login", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void findAllShows_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                findAllShows_args args = new findAllShows_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                findAllShows_result result = new findAllShows_result();
                try
                {
                    result.Success = iface_.findAllShows();
                    oprot.WriteMessageBegin(new TMessage("findAllShows", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("findAllShows", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void ticketsSold_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                ticketsSold_args args = new ticketsSold_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                ticketsSold_result result = new ticketsSold_result();
                try
                {
                    iface_.ticketsSold(args.ShowDTO, args.TicketDTO);
                    oprot.WriteMessageBegin(new TMessage("ticketsSold", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("ticketsSold", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

            public void logOut_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                logOut_args args = new logOut_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                logOut_result result = new logOut_result();
                try
                {
                    result.Success = iface_.logOut(args.Username, args.Host, args.Port);
                    oprot.WriteMessageBegin(new TMessage("logOut", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("logOut", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class login_args : TBase
        {
            private string _username;
            private string _password;
            private string _host;
            private int _port;

            public string Username
            {
                get
                {
                    return _username;
                }
                set
                {
                    __isset.username = true;
                    this._username = value;
                }
            }

            public string Password
            {
                get
                {
                    return _password;
                }
                set
                {
                    __isset.password = true;
                    this._password = value;
                }
            }

            public string Host
            {
                get
                {
                    return _host;
                }
                set
                {
                    __isset.host = true;
                    this._host = value;
                }
            }

            public int Port
            {
                get
                {
                    return _port;
                }
                set
                {
                    __isset.port = true;
                    this._port = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool username;
                public bool password;
                public bool host;
                public bool port;
            }

            public login_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Username = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.String)
                                {
                                    Password = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.String)
                                {
                                    Host = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 4:
                                if (field.Type == TType.I32)
                                {
                                    Port = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("login_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (Username != null && __isset.username)
                    {
                        field.Name = "username";
                        field.Type = TType.String;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Username);
                        oprot.WriteFieldEnd();
                    }
                    if (Password != null && __isset.password)
                    {
                        field.Name = "password";
                        field.Type = TType.String;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Password);
                        oprot.WriteFieldEnd();
                    }
                    if (Host != null && __isset.host)
                    {
                        field.Name = "host";
                        field.Type = TType.String;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Host);
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.port)
                    {
                        field.Name = "port";
                        field.Type = TType.I32;
                        field.ID = 4;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(Port);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("login_args(");
                bool __first = true;
                if (Username != null && __isset.username)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Username: ");
                    __sb.Append(Username);
                }
                if (Password != null && __isset.password)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Password: ");
                    __sb.Append(Password);
                }
                if (Host != null && __isset.host)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Host: ");
                    __sb.Append(Host);
                }
                if (__isset.port)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Port: ");
                    __sb.Append(Port);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class login_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public login_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("login_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            oprot.WriteString(Success);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("login_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class findAllShows_args : TBase
        {

            public findAllShows_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("findAllShows_args");
                    oprot.WriteStructBegin(struc);
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("findAllShows_args(");
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class findAllShows_result : TBase
        {
            private List<ShowDTO> _success;

            public List<ShowDTO> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public findAllShows_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Success = new List<ShowDTO>();
                                        TList _list0 = iprot.ReadListBegin();
                                        for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                        {
                                            ShowDTO _elem2;
                                            _elem2 = new ShowDTO();
                                            _elem2.Read(iprot);
                                            Success.Add(_elem2);
                                        }
                                        iprot.ReadListEnd();
                                    }
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("findAllShows_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            {
                                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                                foreach (ShowDTO _iter3 in Success)
                                {
                                    _iter3.Write(oprot);
                                }
                                oprot.WriteListEnd();
                            }
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("findAllShows_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class ticketsSold_args : TBase
        {
            private ShowDTO _showDTO;
            private TicketDTO _ticketDTO;

            public ShowDTO ShowDTO
            {
                get
                {
                    return _showDTO;
                }
                set
                {
                    __isset.showDTO = true;
                    this._showDTO = value;
                }
            }

            public TicketDTO TicketDTO
            {
                get
                {
                    return _ticketDTO;
                }
                set
                {
                    __isset.ticketDTO = true;
                    this._ticketDTO = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool showDTO;
                public bool ticketDTO;
            }

            public ticketsSold_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    ShowDTO = new ShowDTO();
                                    ShowDTO.Read(iprot);
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    TicketDTO = new TicketDTO();
                                    TicketDTO.Read(iprot);
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("ticketsSold_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (ShowDTO != null && __isset.showDTO)
                    {
                        field.Name = "showDTO";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        ShowDTO.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    if (TicketDTO != null && __isset.ticketDTO)
                    {
                        field.Name = "ticketDTO";
                        field.Type = TType.Struct;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        TicketDTO.Write(oprot);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("ticketsSold_args(");
                bool __first = true;
                if (ShowDTO != null && __isset.showDTO)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("ShowDTO: ");
                    __sb.Append(ShowDTO == null ? "<null>" : ShowDTO.ToString());
                }
                if (TicketDTO != null && __isset.ticketDTO)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("TicketDTO: ");
                    __sb.Append(TicketDTO == null ? "<null>" : TicketDTO.ToString());
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class ticketsSold_result : TBase
        {

            public ticketsSold_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("ticketsSold_result");
                    oprot.WriteStructBegin(struc);

                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("ticketsSold_result(");
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class logOut_args : TBase
        {
            private string _username;
            private string _host;
            private int _port;

            public string Username
            {
                get
                {
                    return _username;
                }
                set
                {
                    __isset.username = true;
                    this._username = value;
                }
            }

            public string Host
            {
                get
                {
                    return _host;
                }
                set
                {
                    __isset.host = true;
                    this._host = value;
                }
            }

            public int Port
            {
                get
                {
                    return _port;
                }
                set
                {
                    __isset.port = true;
                    this._port = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool username;
                public bool host;
                public bool port;
            }

            public logOut_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Username = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.String)
                                {
                                    Host = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.I32)
                                {
                                    Port = iprot.ReadI32();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("logOut_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (Username != null && __isset.username)
                    {
                        field.Name = "username";
                        field.Type = TType.String;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Username);
                        oprot.WriteFieldEnd();
                    }
                    if (Host != null && __isset.host)
                    {
                        field.Name = "host";
                        field.Type = TType.String;
                        field.ID = 2;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(Host);
                        oprot.WriteFieldEnd();
                    }
                    if (__isset.port)
                    {
                        field.Name = "port";
                        field.Type = TType.I32;
                        field.ID = 3;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteI32(Port);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("logOut_args(");
                bool __first = true;
                if (Username != null && __isset.username)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Username: ");
                    __sb.Append(Username);
                }
                if (Host != null && __isset.host)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Host: ");
                    __sb.Append(Host);
                }
                if (__isset.port)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Port: ");
                    __sb.Append(Port);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }


#if !SILVERLIGHT
        [Serializable]
#endif
        public partial class logOut_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            public Isset __isset;
#if !SILVERLIGHT
            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public logOut_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;
                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("logOut_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            oprot.WriteString(Success);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("logOut_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }

        }

    }

}

