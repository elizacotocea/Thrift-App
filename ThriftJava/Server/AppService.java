@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-04-29")
public class AppService {
        public interface Iface {

            public java.lang.String login(java.lang.String username, java.lang.String password, java.lang.String host, int port) throws org.apache.thrift.TException;

            public java.util.List<ShowDTO> findAllShows() throws org.apache.thrift.TException;

            public void ticketsSold(ShowDTO showDTO, TicketDTO ticketDTO) throws org.apache.thrift.TException;

            public java.lang.String logOut(java.lang.String username, java.lang.String host, int port) throws org.apache.thrift.TException;

        }

        public interface AsyncIface {

            public void login(java.lang.String username, java.lang.String password, java.lang.String host, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

            public void findAllShows(org.apache.thrift.async.AsyncMethodCallback<java.util.List<ShowDTO>> resultHandler) throws org.apache.thrift.TException;

            public void ticketsSold(ShowDTO showDTO, TicketDTO ticketDTO, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

            public void logOut(java.lang.String username, java.lang.String host, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        }

        public static class Client extends org.apache.thrift.TServiceClient implements Iface {
            public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
                public Factory() {}
                public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                    return new Client(prot);
                }
                public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                    return new Client(iprot, oprot);
                }
            }

            public Client(org.apache.thrift.protocol.TProtocol prot)
            {
                super(prot, prot);
            }

            public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                super(iprot, oprot);
            }

            public java.lang.String login(java.lang.String username, java.lang.String password, java.lang.String host, int port) throws org.apache.thrift.TException
            {
                send_login(username, password, host, port);
                return recv_login();
            }

            public void send_login(java.lang.String username, java.lang.String password, java.lang.String host, int port) throws org.apache.thrift.TException
            {
                login_args args = new login_args();
                args.setUsername(username);
                args.setPassword(password);
                args.setHost(host);
                args.setPort(port);
                sendBase("login", args);
            }

            public java.lang.String recv_login() throws org.apache.thrift.TException
            {
                login_result result = new login_result();
                receiveBase(result, "login");
                if (result.isSetSuccess()) {
                    return result.success;
                }
                throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
            }

            public java.util.List<ShowDTO> findAllShows() throws org.apache.thrift.TException
            {
                send_findAllShows();
                return recv_findAllShows();
            }

            public void send_findAllShows() throws org.apache.thrift.TException
            {
                findAllShows_args args = new findAllShows_args();
                sendBase("findAllShows", args);
            }

            public java.util.List<ShowDTO> recv_findAllShows() throws org.apache.thrift.TException
            {
                findAllShows_result result = new findAllShows_result();
                receiveBase(result, "findAllShows");
                if (result.isSetSuccess()) {
                    return result.success;
                }
                throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllShows failed: unknown result");
            }

            public void ticketsSold(ShowDTO showDTO, TicketDTO ticketDTO) throws org.apache.thrift.TException
            {
                send_ticketsSold(showDTO, ticketDTO);
                recv_ticketsSold();
            }

            public void send_ticketsSold(ShowDTO showDTO, TicketDTO ticketDTO) throws org.apache.thrift.TException
            {
                ticketsSold_args args = new ticketsSold_args();
                args.setShowDTO(showDTO);
                args.setTicketDTO(ticketDTO);
                sendBase("ticketsSold", args);
            }

            public void recv_ticketsSold() throws org.apache.thrift.TException
            {
                ticketsSold_result result = new ticketsSold_result();
                receiveBase(result, "ticketsSold");
                return;
            }

            public java.lang.String logOut(java.lang.String username, java.lang.String host, int port) throws org.apache.thrift.TException
            {
                send_logOut(username, host, port);
                return recv_logOut();
            }

            public void send_logOut(java.lang.String username, java.lang.String host, int port) throws org.apache.thrift.TException
            {
                logOut_args args = new logOut_args();
                args.setUsername(username);
                args.setHost(host);
                args.setPort(port);
                sendBase("logOut", args);
            }

            public java.lang.String recv_logOut() throws org.apache.thrift.TException
            {
                logOut_result result = new logOut_result();
                receiveBase(result, "logOut");
                if (result.isSetSuccess()) {
                    return result.success;
                }
                throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "logOut failed: unknown result");
            }

        }
        public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
            public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
                private org.apache.thrift.async.TAsyncClientManager clientManager;
                private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
                public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                    this.clientManager = clientManager;
                    this.protocolFactory = protocolFactory;
                }
                public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                    return new AsyncClient(protocolFactory, clientManager, transport);
                }
            }

            public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
                super(protocolFactory, clientManager, transport);
            }

            public void login(java.lang.String username, java.lang.String password, java.lang.String host, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                checkReady();
                login_call method_call = new login_call(username, password, host, port, resultHandler, this, ___protocolFactory, ___transport);
                this.___currentMethod = method_call;
                ___manager.call(method_call);
            }

            public static class login_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
                private java.lang.String username;
                private java.lang.String password;
                private java.lang.String host;
                private int port;
                public login_call(java.lang.String username, java.lang.String password, java.lang.String host, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                    super(client, protocolFactory, transport, resultHandler, false);
                    this.username = username;
                    this.password = password;
                    this.host = host;
                    this.port = port;
                }

                public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                    prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
                    login_args args = new login_args();
                    args.setUsername(username);
                    args.setPassword(password);
                    args.setHost(host);
                    args.setPort(port);
                    args.write(prot);
                    prot.writeMessageEnd();
                }

                public java.lang.String getResult() throws org.apache.thrift.TException {
                    if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                        throw new java.lang.IllegalStateException("Method call not finished!");
                    }
                    org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                    org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                    return (new Client(prot)).recv_login();
                }
            }

            public void findAllShows(org.apache.thrift.async.AsyncMethodCallback<java.util.List<ShowDTO>> resultHandler) throws org.apache.thrift.TException {
                checkReady();
                findAllShows_call method_call = new findAllShows_call(resultHandler, this, ___protocolFactory, ___transport);
                this.___currentMethod = method_call;
                ___manager.call(method_call);
            }

            public static class findAllShows_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ShowDTO>> {
                public findAllShows_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<ShowDTO>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                    super(client, protocolFactory, transport, resultHandler, false);
                }

                public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                    prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllShows", org.apache.thrift.protocol.TMessageType.CALL, 0));
                    findAllShows_args args = new findAllShows_args();
                    args.write(prot);
                    prot.writeMessageEnd();
                }

                public java.util.List<ShowDTO> getResult() throws org.apache.thrift.TException {
                    if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                        throw new java.lang.IllegalStateException("Method call not finished!");
                    }
                    org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                    org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                    return (new Client(prot)).recv_findAllShows();
                }
            }

            public void ticketsSold(ShowDTO showDTO, TicketDTO ticketDTO, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                checkReady();
                ticketsSold_call method_call = new ticketsSold_call(showDTO, ticketDTO, resultHandler, this, ___protocolFactory, ___transport);
                this.___currentMethod = method_call;
                ___manager.call(method_call);
            }

            public static class ticketsSold_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
                private ShowDTO showDTO;
                private TicketDTO ticketDTO;
                public ticketsSold_call(ShowDTO showDTO, TicketDTO ticketDTO, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                    super(client, protocolFactory, transport, resultHandler, false);
                    this.showDTO = showDTO;
                    this.ticketDTO = ticketDTO;
                }

                public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                    prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ticketsSold", org.apache.thrift.protocol.TMessageType.CALL, 0));
                    ticketsSold_args args = new ticketsSold_args();
                    args.setShowDTO(showDTO);
                    args.setTicketDTO(ticketDTO);
                    args.write(prot);
                    prot.writeMessageEnd();
                }

                public Void getResult() throws org.apache.thrift.TException {
                    if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                        throw new java.lang.IllegalStateException("Method call not finished!");
                    }
                    org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                    org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                    return null;
                }
            }

            public void logOut(java.lang.String username, java.lang.String host, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                checkReady();
                logOut_call method_call = new logOut_call(username, host, port, resultHandler, this, ___protocolFactory, ___transport);
                this.___currentMethod = method_call;
                ___manager.call(method_call);
            }

            public static class logOut_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
                private java.lang.String username;
                private java.lang.String host;
                private int port;
                public logOut_call(java.lang.String username, java.lang.String host, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                    super(client, protocolFactory, transport, resultHandler, false);
                    this.username = username;
                    this.host = host;
                    this.port = port;
                }

                public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                    prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logOut", org.apache.thrift.protocol.TMessageType.CALL, 0));
                    logOut_args args = new logOut_args();
                    args.setUsername(username);
                    args.setHost(host);
                    args.setPort(port);
                    args.write(prot);
                    prot.writeMessageEnd();
                }

                public java.lang.String getResult() throws org.apache.thrift.TException {
                    if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                        throw new java.lang.IllegalStateException("Method call not finished!");
                    }
                    org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                    org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                    return (new Client(prot)).recv_logOut();
                }
            }

        }

        public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
            private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
            public Processor(I iface) {
                super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
            }

            protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
                super(iface, getProcessMap(processMap));
            }

            private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
                processMap.put("login", new login());
                processMap.put("findAllShows", new findAllShows());
                processMap.put("ticketsSold", new ticketsSold());
                processMap.put("logOut", new logOut());
                return processMap;
            }

            public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
                public login() {
                    super("login");
                }

                public login_args getEmptyArgsInstance() {
                    return new login_args();
                }

                protected boolean isOneway() {
                    return false;
                }

                @Override
                protected boolean rethrowUnhandledExceptions() {
                    return false;
                }

                public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
                    login_result result = new login_result();
                    result.success = iface.login(args.username, args.password, args.host, args.port);
                    return result;
                }
            }

            public static class findAllShows<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllShows_args> {
                public findAllShows() {
                    super("findAllShows");
                }

                public findAllShows_args getEmptyArgsInstance() {
                    return new findAllShows_args();
                }

                protected boolean isOneway() {
                    return false;
                }

                @Override
                protected boolean rethrowUnhandledExceptions() {
                    return false;
                }

                public findAllShows_result getResult(I iface, findAllShows_args args) throws org.apache.thrift.TException {
                    findAllShows_result result = new findAllShows_result();
                    result.success = iface.findAllShows();
                    return result;
                }
            }

            public static class ticketsSold<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ticketsSold_args> {
                public ticketsSold() {
                    super("ticketsSold");
                }

                public ticketsSold_args getEmptyArgsInstance() {
                    return new ticketsSold_args();
                }

                protected boolean isOneway() {
                    return false;
                }

                @Override
                protected boolean rethrowUnhandledExceptions() {
                    return false;
                }

                public ticketsSold_result getResult(I iface, ticketsSold_args args) throws org.apache.thrift.TException {
                    ticketsSold_result result = new ticketsSold_result();
                    iface.ticketsSold(args.showDTO, args.ticketDTO);
                    return result;
                }
            }

            public static class logOut<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logOut_args> {
                public logOut() {
                    super("logOut");
                }

                public logOut_args getEmptyArgsInstance() {
                    return new logOut_args();
                }

                protected boolean isOneway() {
                    return false;
                }

                @Override
                protected boolean rethrowUnhandledExceptions() {
                    return false;
                }

                public logOut_result getResult(I iface, logOut_args args) throws org.apache.thrift.TException {
                    logOut_result result = new logOut_result();
                    result.success = iface.logOut(args.username, args.host, args.port);
                    return result;
                }
            }

        }

        public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
            private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
            public AsyncProcessor(I iface) {
                super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
            }

            protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
                super(iface, getProcessMap(processMap));
            }

            private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
                processMap.put("login", new login());
                processMap.put("findAllShows", new findAllShows());
                processMap.put("ticketsSold", new ticketsSold());
                processMap.put("logOut", new logOut());
                return processMap;
            }

            public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, java.lang.String> {
                public login() {
                    super("login");
                }

                public login_args getEmptyArgsInstance() {
                    return new login_args();
                }

                public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                    final org.apache.thrift.AsyncProcessFunction fcall = this;
                    return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                        public void onComplete(java.lang.String o) {
                            login_result result = new login_result();
                            result.success = o;
                            try {
                                fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            } catch (org.apache.thrift.transport.TTransportException e) {
                                _LOGGER.error("TTransportException writing to internal frame buffer", e);
                                fb.close();
                            } catch (java.lang.Exception e) {
                                _LOGGER.error("Exception writing to internal frame buffer", e);
                                onError(e);
                            }
                        }
                        public void onError(java.lang.Exception e) {
                            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                            org.apache.thrift.TSerializable msg;
                            login_result result = new login_result();
                            if (e instanceof org.apache.thrift.transport.TTransportException) {
                                _LOGGER.error("TTransportException inside handler", e);
                                fb.close();
                                return;
                            } else if (e instanceof org.apache.thrift.TApplicationException) {
                                _LOGGER.error("TApplicationException inside handler", e);
                                msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                                msg = (org.apache.thrift.TApplicationException)e;
                            } else {
                                _LOGGER.error("Exception inside handler", e);
                                msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                                msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                            }
                            try {
                                fcall.sendResponse(fb,msg,msgType,seqid);
                            } catch (java.lang.Exception ex) {
                                _LOGGER.error("Exception writing to internal frame buffer", ex);
                                fb.close();
                            }
                        }
                    };
                }

                protected boolean isOneway() {
                    return false;
                }

                public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                    iface.login(args.username, args.password, args.host, args.port,resultHandler);
                }
            }

            public static class findAllShows<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllShows_args, java.util.List<ShowDTO>> {
                public findAllShows() {
                    super("findAllShows");
                }

                public findAllShows_args getEmptyArgsInstance() {
                    return new findAllShows_args();
                }

                public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ShowDTO>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                    final org.apache.thrift.AsyncProcessFunction fcall = this;
                    return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ShowDTO>>() {
                        public void onComplete(java.util.List<ShowDTO> o) {
                            findAllShows_result result = new findAllShows_result();
                            result.success = o;
                            try {
                                fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            } catch (org.apache.thrift.transport.TTransportException e) {
                                _LOGGER.error("TTransportException writing to internal frame buffer", e);
                                fb.close();
                            } catch (java.lang.Exception e) {
                                _LOGGER.error("Exception writing to internal frame buffer", e);
                                onError(e);
                            }
                        }
                        public void onError(java.lang.Exception e) {
                            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                            org.apache.thrift.TSerializable msg;
                            findAllShows_result result = new findAllShows_result();
                            if (e instanceof org.apache.thrift.transport.TTransportException) {
                                _LOGGER.error("TTransportException inside handler", e);
                                fb.close();
                                return;
                            } else if (e instanceof org.apache.thrift.TApplicationException) {
                                _LOGGER.error("TApplicationException inside handler", e);
                                msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                                msg = (org.apache.thrift.TApplicationException)e;
                            } else {
                                _LOGGER.error("Exception inside handler", e);
                                msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                                msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                            }
                            try {
                                fcall.sendResponse(fb,msg,msgType,seqid);
                            } catch (java.lang.Exception ex) {
                                _LOGGER.error("Exception writing to internal frame buffer", ex);
                                fb.close();
                            }
                        }
                    };
                }

                protected boolean isOneway() {
                    return false;
                }

                public void start(I iface, findAllShows_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ShowDTO>> resultHandler) throws org.apache.thrift.TException {
                    iface.findAllShows(resultHandler);
                }
            }

            public static class ticketsSold<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ticketsSold_args, Void> {
                public ticketsSold() {
                    super("ticketsSold");
                }

                public ticketsSold_args getEmptyArgsInstance() {
                    return new ticketsSold_args();
                }

                public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                    final org.apache.thrift.AsyncProcessFunction fcall = this;
                    return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                        public void onComplete(Void o) {
                            ticketsSold_result result = new ticketsSold_result();
                            try {
                                fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            } catch (org.apache.thrift.transport.TTransportException e) {
                                _LOGGER.error("TTransportException writing to internal frame buffer", e);
                                fb.close();
                            } catch (java.lang.Exception e) {
                                _LOGGER.error("Exception writing to internal frame buffer", e);
                                onError(e);
                            }
                        }
                        public void onError(java.lang.Exception e) {
                            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                            org.apache.thrift.TSerializable msg;
                            ticketsSold_result result = new ticketsSold_result();
                            if (e instanceof org.apache.thrift.transport.TTransportException) {
                                _LOGGER.error("TTransportException inside handler", e);
                                fb.close();
                                return;
                            } else if (e instanceof org.apache.thrift.TApplicationException) {
                                _LOGGER.error("TApplicationException inside handler", e);
                                msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                                msg = (org.apache.thrift.TApplicationException)e;
                            } else {
                                _LOGGER.error("Exception inside handler", e);
                                msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                                msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                            }
                            try {
                                fcall.sendResponse(fb,msg,msgType,seqid);
                            } catch (java.lang.Exception ex) {
                                _LOGGER.error("Exception writing to internal frame buffer", ex);
                                fb.close();
                            }
                        }
                    };
                }

                protected boolean isOneway() {
                    return false;
                }

                public void start(I iface, ticketsSold_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                    iface.ticketsSold(args.showDTO, args.ticketDTO,resultHandler);
                }
            }

            public static class logOut<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logOut_args, java.lang.String> {
                public logOut() {
                    super("logOut");
                }

                public logOut_args getEmptyArgsInstance() {
                    return new logOut_args();
                }

                public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                    final org.apache.thrift.AsyncProcessFunction fcall = this;
                    return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                        public void onComplete(java.lang.String o) {
                            logOut_result result = new logOut_result();
                            result.success = o;
                            try {
                                fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            } catch (org.apache.thrift.transport.TTransportException e) {
                                _LOGGER.error("TTransportException writing to internal frame buffer", e);
                                fb.close();
                            } catch (java.lang.Exception e) {
                                _LOGGER.error("Exception writing to internal frame buffer", e);
                                onError(e);
                            }
                        }
                        public void onError(java.lang.Exception e) {
                            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                            org.apache.thrift.TSerializable msg;
                            logOut_result result = new logOut_result();
                            if (e instanceof org.apache.thrift.transport.TTransportException) {
                                _LOGGER.error("TTransportException inside handler", e);
                                fb.close();
                                return;
                            } else if (e instanceof org.apache.thrift.TApplicationException) {
                                _LOGGER.error("TApplicationException inside handler", e);
                                msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                                msg = (org.apache.thrift.TApplicationException)e;
                            } else {
                                _LOGGER.error("Exception inside handler", e);
                                msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                                msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                            }
                            try {
                                fcall.sendResponse(fb,msg,msgType,seqid);
                            } catch (java.lang.Exception ex) {
                                _LOGGER.error("Exception writing to internal frame buffer", ex);
                                fb.close();
                            }
                        }
                    };
                }

                protected boolean isOneway() {
                    return false;
                }

                public void start(I iface, logOut_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                    iface.logOut(args.username, args.host, args.port,resultHandler);
                }
            }

        }

        public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
            private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

            private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
            private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
            private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)3);
            private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)4);

            private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_argsStandardSchemeFactory();
            private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_argsTupleSchemeFactory();

            public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
            public @org.apache.thrift.annotation.Nullable java.lang.String password; // required
            public @org.apache.thrift.annotation.Nullable java.lang.String host; // required
            public int port; // required

            /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
            public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                USERNAME((short)1, "username"),
                PASSWORD((short)2, "password"),
                HOST((short)3, "host"),
                PORT((short)4, "port");

                private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

                static {
                    for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                        byName.put(field.getFieldName(), field);
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByThriftId(int fieldId) {
                    switch(fieldId) {
                        case 1: // USERNAME
                            return USERNAME;
                        case 2: // PASSWORD
                            return PASSWORD;
                        case 3: // HOST
                            return HOST;
                        case 4: // PORT
                            return PORT;
                        default:
                            return null;
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, throwing an exception
                 * if it is not found.
                 */
                public static _Fields findByThriftIdOrThrow(int fieldId) {
                    _Fields fields = findByThriftId(fieldId);
                    if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                    return fields;
                }

                /**
                 * Find the _Fields constant that matches name, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByName(java.lang.String name) {
                    return byName.get(name);
                }

                private final short _thriftId;
                private final java.lang.String _fieldName;

                _Fields(short thriftId, java.lang.String fieldName) {
                    _thriftId = thriftId;
                    _fieldName = fieldName;
                }

                public short getThriftFieldId() {
                    return _thriftId;
                }

                public java.lang.String getFieldName() {
                    return _fieldName;
                }
            }

            // isset id assignments
            private static final int __PORT_ISSET_ID = 0;
            private byte __isset_bitfield = 0;
            public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
            static {
                java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
                tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
                tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
                tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
                tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
                metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
                org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
            }

            public login_args() {
            }

            public login_args(
                    java.lang.String username,
                    java.lang.String password,
                    java.lang.String host,
                    int port)
            {
                this();
                this.username = username;
                this.password = password;
                this.host = host;
                this.port = port;
                setPortIsSet(true);
            }

            /**
             * Performs a deep copy on <i>other</i>.
             */
            public login_args(login_args other) {
                __isset_bitfield = other.__isset_bitfield;
                if (other.isSetUsername()) {
                    this.username = other.username;
                }
                if (other.isSetPassword()) {
                    this.password = other.password;
                }
                if (other.isSetHost()) {
                    this.host = other.host;
                }
                this.port = other.port;
            }

            public login_args deepCopy() {
                return new login_args(this);
            }

            @Override
            public void clear() {
                this.username = null;
                this.password = null;
                this.host = null;
                setPortIsSet(false);
                this.port = 0;
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.String getUsername() {
                return this.username;
            }

            public login_args setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
                this.username = username;
                return this;
            }

            public void unsetUsername() {
                this.username = null;
            }

            /** Returns true if field username is set (has been assigned a value) and false otherwise */
            public boolean isSetUsername() {
                return this.username != null;
            }

            public void setUsernameIsSet(boolean value) {
                if (!value) {
                    this.username = null;
                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.String getPassword() {
                return this.password;
            }

            public login_args setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
                this.password = password;
                return this;
            }

            public void unsetPassword() {
                this.password = null;
            }

            /** Returns true if field password is set (has been assigned a value) and false otherwise */
            public boolean isSetPassword() {
                return this.password != null;
            }

            public void setPasswordIsSet(boolean value) {
                if (!value) {
                    this.password = null;
                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.String getHost() {
                return this.host;
            }

            public login_args setHost(@org.apache.thrift.annotation.Nullable java.lang.String host) {
                this.host = host;
                return this;
            }

            public void unsetHost() {
                this.host = null;
            }

            /** Returns true if field host is set (has been assigned a value) and false otherwise */
            public boolean isSetHost() {
                return this.host != null;
            }

            public void setHostIsSet(boolean value) {
                if (!value) {
                    this.host = null;
                }
            }

            public int getPort() {
                return this.port;
            }

            public login_args setPort(int port) {
                this.port = port;
                setPortIsSet(true);
                return this;
            }

            public void unsetPort() {
                __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
            }

            /** Returns true if field port is set (has been assigned a value) and false otherwise */
            public boolean isSetPort() {
                return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
            }

            public void setPortIsSet(boolean value) {
                __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
            }

            public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
                switch (field) {
                    case USERNAME:
                        if (value == null) {
                            unsetUsername();
                        } else {
                            setUsername((java.lang.String)value);
                        }
                        break;

                    case PASSWORD:
                        if (value == null) {
                            unsetPassword();
                        } else {
                            setPassword((java.lang.String)value);
                        }
                        break;

                    case HOST:
                        if (value == null) {
                            unsetHost();
                        } else {
                            setHost((java.lang.String)value);
                        }
                        break;

                    case PORT:
                        if (value == null) {
                            unsetPort();
                        } else {
                            setPort((java.lang.Integer)value);
                        }
                        break;

                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.Object getFieldValue(_Fields field) {
                switch (field) {
                    case USERNAME:
                        return getUsername();

                    case PASSWORD:
                        return getPassword();

                    case HOST:
                        return getHost();

                    case PORT:
                        return getPort();

                }
                throw new java.lang.IllegalStateException();
            }

            /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
            public boolean isSet(_Fields field) {
                if (field == null) {
                    throw new java.lang.IllegalArgumentException();
                }

                switch (field) {
                    case USERNAME:
                        return isSetUsername();
                    case PASSWORD:
                        return isSetPassword();
                    case HOST:
                        return isSetHost();
                    case PORT:
                        return isSetPort();
                }
                throw new java.lang.IllegalStateException();
            }

            @Override
            public boolean equals(java.lang.Object that) {
                if (that == null)
                    return false;
                if (that instanceof login_args)
                    return this.equals((login_args)that);
                return false;
            }

            public boolean equals(login_args that) {
                if (that == null)
                    return false;
                if (this == that)
                    return true;

                boolean this_present_username = true && this.isSetUsername();
                boolean that_present_username = true && that.isSetUsername();
                if (this_present_username || that_present_username) {
                    if (!(this_present_username && that_present_username))
                        return false;
                    if (!this.username.equals(that.username))
                        return false;
                }

                boolean this_present_password = true && this.isSetPassword();
                boolean that_present_password = true && that.isSetPassword();
                if (this_present_password || that_present_password) {
                    if (!(this_present_password && that_present_password))
                        return false;
                    if (!this.password.equals(that.password))
                        return false;
                }

                boolean this_present_host = true && this.isSetHost();
                boolean that_present_host = true && that.isSetHost();
                if (this_present_host || that_present_host) {
                    if (!(this_present_host && that_present_host))
                        return false;
                    if (!this.host.equals(that.host))
                        return false;
                }

                boolean this_present_port = true;
                boolean that_present_port = true;
                if (this_present_port || that_present_port) {
                    if (!(this_present_port && that_present_port))
                        return false;
                    if (this.port != that.port)
                        return false;
                }

                return true;
            }

            @Override
            public int hashCode() {
                int hashCode = 1;

                hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
                if (isSetUsername())
                    hashCode = hashCode * 8191 + username.hashCode();

                hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
                if (isSetPassword())
                    hashCode = hashCode * 8191 + password.hashCode();

                hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
                if (isSetHost())
                    hashCode = hashCode * 8191 + host.hashCode();

                hashCode = hashCode * 8191 + port;

                return hashCode;
            }

            @Override
            public int compareTo(login_args other) {
                if (!getClass().equals(other.getClass())) {
                    return getClass().getName().compareTo(other.getClass().getName());
                }

                int lastComparison = 0;

                lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetUsername()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetPassword()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                lastComparison = java.lang.Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetHost()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetPort()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                return 0;
            }

            @org.apache.thrift.annotation.Nullable
            public _Fields fieldForId(int fieldId) {
                return _Fields.findByThriftId(fieldId);
            }

            public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
                scheme(iprot).read(iprot, this);
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
                scheme(oprot).write(oprot, this);
            }

            @Override
            public java.lang.String toString() {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("login_args(");
                boolean first = true;

                sb.append("username:");
                if (this.username == null) {
                    sb.append("null");
                } else {
                    sb.append(this.username);
                }
                first = false;
                if (!first) sb.append(", ");
                sb.append("password:");
                if (this.password == null) {
                    sb.append("null");
                } else {
                    sb.append(this.password);
                }
                first = false;
                if (!first) sb.append(", ");
                sb.append("host:");
                if (this.host == null) {
                    sb.append("null");
                } else {
                    sb.append(this.host);
                }
                first = false;
                if (!first) sb.append(", ");
                sb.append("port:");
                sb.append(this.port);
                first = false;
                sb.append(")");
                return sb.toString();
            }

            public void validate() throws org.apache.thrift.TException {
                // check for required fields
                // check for sub-struct validity
            }

            private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
                try {
                    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
                try {
                    // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                    __isset_bitfield = 0;
                    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private static class login_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public login_argsStandardScheme getScheme() {
                    return new login_argsStandardScheme();
                }
            }

            private static class login_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_args> {

                public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TField schemeField;
                    iprot.readStructBegin();
                    while (true)
                    {
                        schemeField = iprot.readFieldBegin();
                        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                            break;
                        }
                        switch (schemeField.id) {
                            case 1: // USERNAME
                                if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                    struct.username = iprot.readString();
                                    struct.setUsernameIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            case 2: // PASSWORD
                                if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                    struct.password = iprot.readString();
                                    struct.setPasswordIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            case 3: // HOST
                                if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                    struct.host = iprot.readString();
                                    struct.setHostIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            case 4: // PORT
                                if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                    struct.port = iprot.readI32();
                                    struct.setPortIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            default:
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        iprot.readFieldEnd();
                    }
                    iprot.readStructEnd();

                    // check for required fields of primitive type, which can't be checked in the validate method
                    struct.validate();
                }

                public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
                    struct.validate();

                    oprot.writeStructBegin(STRUCT_DESC);
                    if (struct.username != null) {
                        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                        oprot.writeString(struct.username);
                        oprot.writeFieldEnd();
                    }
                    if (struct.password != null) {
                        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                        oprot.writeString(struct.password);
                        oprot.writeFieldEnd();
                    }
                    if (struct.host != null) {
                        oprot.writeFieldBegin(HOST_FIELD_DESC);
                        oprot.writeString(struct.host);
                        oprot.writeFieldEnd();
                    }
                    oprot.writeFieldBegin(PORT_FIELD_DESC);
                    oprot.writeI32(struct.port);
                    oprot.writeFieldEnd();
                    oprot.writeFieldStop();
                    oprot.writeStructEnd();
                }

            }

            private static class login_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public login_argsTupleScheme getScheme() {
                    return new login_argsTupleScheme();
                }
            }

            private static class login_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_args> {

                @Override
                public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet optionals = new java.util.BitSet();
                    if (struct.isSetUsername()) {
                        optionals.set(0);
                    }
                    if (struct.isSetPassword()) {
                        optionals.set(1);
                    }
                    if (struct.isSetHost()) {
                        optionals.set(2);
                    }
                    if (struct.isSetPort()) {
                        optionals.set(3);
                    }
                    oprot.writeBitSet(optionals, 4);
                    if (struct.isSetUsername()) {
                        oprot.writeString(struct.username);
                    }
                    if (struct.isSetPassword()) {
                        oprot.writeString(struct.password);
                    }
                    if (struct.isSetHost()) {
                        oprot.writeString(struct.host);
                    }
                    if (struct.isSetPort()) {
                        oprot.writeI32(struct.port);
                    }
                }

                @Override
                public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet incoming = iprot.readBitSet(4);
                    if (incoming.get(0)) {
                        struct.username = iprot.readString();
                        struct.setUsernameIsSet(true);
                    }
                    if (incoming.get(1)) {
                        struct.password = iprot.readString();
                        struct.setPasswordIsSet(true);
                    }
                    if (incoming.get(2)) {
                        struct.host = iprot.readString();
                        struct.setHostIsSet(true);
                    }
                    if (incoming.get(3)) {
                        struct.port = iprot.readI32();
                        struct.setPortIsSet(true);
                    }
                }
            }

            private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
                return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
            }
        }

        public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
            private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

            private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

            private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new login_resultStandardSchemeFactory();
            private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new login_resultTupleSchemeFactory();

            public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

            /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
            public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                SUCCESS((short)0, "success");

                private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

                static {
                    for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                        byName.put(field.getFieldName(), field);
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByThriftId(int fieldId) {
                    switch(fieldId) {
                        case 0: // SUCCESS
                            return SUCCESS;
                        default:
                            return null;
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, throwing an exception
                 * if it is not found.
                 */
                public static _Fields findByThriftIdOrThrow(int fieldId) {
                    _Fields fields = findByThriftId(fieldId);
                    if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                    return fields;
                }

                /**
                 * Find the _Fields constant that matches name, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByName(java.lang.String name) {
                    return byName.get(name);
                }

                private final short _thriftId;
                private final java.lang.String _fieldName;

                _Fields(short thriftId, java.lang.String fieldName) {
                    _thriftId = thriftId;
                    _fieldName = fieldName;
                }

                public short getThriftFieldId() {
                    return _thriftId;
                }

                public java.lang.String getFieldName() {
                    return _fieldName;
                }
            }

            // isset id assignments
            public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
            static {
                java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
                tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
                metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
                org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
            }

            public login_result() {
            }

            public login_result(
                    java.lang.String success)
            {
                this();
                this.success = success;
            }

            /**
             * Performs a deep copy on <i>other</i>.
             */
            public login_result(login_result other) {
                if (other.isSetSuccess()) {
                    this.success = other.success;
                }
            }

            public login_result deepCopy() {
                return new login_result(this);
            }

            @Override
            public void clear() {
                this.success = null;
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.String getSuccess() {
                return this.success;
            }

            public login_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
                this.success = success;
                return this;
            }

            public void unsetSuccess() {
                this.success = null;
            }

            /** Returns true if field success is set (has been assigned a value) and false otherwise */
            public boolean isSetSuccess() {
                return this.success != null;
            }

            public void setSuccessIsSet(boolean value) {
                if (!value) {
                    this.success = null;
                }
            }

            public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
                switch (field) {
                    case SUCCESS:
                        if (value == null) {
                            unsetSuccess();
                        } else {
                            setSuccess((java.lang.String)value);
                        }
                        break;

                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.Object getFieldValue(_Fields field) {
                switch (field) {
                    case SUCCESS:
                        return getSuccess();

                }
                throw new java.lang.IllegalStateException();
            }

            /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
            public boolean isSet(_Fields field) {
                if (field == null) {
                    throw new java.lang.IllegalArgumentException();
                }

                switch (field) {
                    case SUCCESS:
                        return isSetSuccess();
                }
                throw new java.lang.IllegalStateException();
            }

            @Override
            public boolean equals(java.lang.Object that) {
                if (that == null)
                    return false;
                if (that instanceof login_result)
                    return this.equals((login_result)that);
                return false;
            }

            public boolean equals(login_result that) {
                if (that == null)
                    return false;
                if (this == that)
                    return true;

                boolean this_present_success = true && this.isSetSuccess();
                boolean that_present_success = true && that.isSetSuccess();
                if (this_present_success || that_present_success) {
                    if (!(this_present_success && that_present_success))
                        return false;
                    if (!this.success.equals(that.success))
                        return false;
                }

                return true;
            }

            @Override
            public int hashCode() {
                int hashCode = 1;

                hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
                if (isSetSuccess())
                    hashCode = hashCode * 8191 + success.hashCode();

                return hashCode;
            }

            @Override
            public int compareTo(login_result other) {
                if (!getClass().equals(other.getClass())) {
                    return getClass().getName().compareTo(other.getClass().getName());
                }

                int lastComparison = 0;

                lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetSuccess()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                return 0;
            }

            @org.apache.thrift.annotation.Nullable
            public _Fields fieldForId(int fieldId) {
                return _Fields.findByThriftId(fieldId);
            }

            public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
                scheme(iprot).read(iprot, this);
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
                scheme(oprot).write(oprot, this);
            }

            @Override
            public java.lang.String toString() {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("login_result(");
                boolean first = true;

                sb.append("success:");
                if (this.success == null) {
                    sb.append("null");
                } else {
                    sb.append(this.success);
                }
                first = false;
                sb.append(")");
                return sb.toString();
            }

            public void validate() throws org.apache.thrift.TException {
                // check for required fields
                // check for sub-struct validity
            }

            private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
                try {
                    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
                try {
                    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private static class login_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public login_resultStandardScheme getScheme() {
                    return new login_resultStandardScheme();
                }
            }

            private static class login_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<login_result> {

                public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TField schemeField;
                    iprot.readStructBegin();
                    while (true)
                    {
                        schemeField = iprot.readFieldBegin();
                        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                            break;
                        }
                        switch (schemeField.id) {
                            case 0: // SUCCESS
                                if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                    struct.success = iprot.readString();
                                    struct.setSuccessIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            default:
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        iprot.readFieldEnd();
                    }
                    iprot.readStructEnd();

                    // check for required fields of primitive type, which can't be checked in the validate method
                    struct.validate();
                }

                public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
                    struct.validate();

                    oprot.writeStructBegin(STRUCT_DESC);
                    if (struct.success != null) {
                        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                        oprot.writeString(struct.success);
                        oprot.writeFieldEnd();
                    }
                    oprot.writeFieldStop();
                    oprot.writeStructEnd();
                }

            }

            private static class login_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public login_resultTupleScheme getScheme() {
                    return new login_resultTupleScheme();
                }
            }

            private static class login_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<login_result> {

                @Override
                public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet optionals = new java.util.BitSet();
                    if (struct.isSetSuccess()) {
                        optionals.set(0);
                    }
                    oprot.writeBitSet(optionals, 1);
                    if (struct.isSetSuccess()) {
                        oprot.writeString(struct.success);
                    }
                }

                @Override
                public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet incoming = iprot.readBitSet(1);
                    if (incoming.get(0)) {
                        struct.success = iprot.readString();
                        struct.setSuccessIsSet(true);
                    }
                }
            }

            private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
                return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
            }
        }

        public static class findAllShows_args implements org.apache.thrift.TBase<findAllShows_args, findAllShows_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllShows_args>   {
            private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllShows_args");


            private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllShows_argsStandardSchemeFactory();
            private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllShows_argsTupleSchemeFactory();


            /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
            public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                ;

                private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

                static {
                    for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                        byName.put(field.getFieldName(), field);
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByThriftId(int fieldId) {
                    switch(fieldId) {
                        default:
                            return null;
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, throwing an exception
                 * if it is not found.
                 */
                public static _Fields findByThriftIdOrThrow(int fieldId) {
                    _Fields fields = findByThriftId(fieldId);
                    if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                    return fields;
                }

                /**
                 * Find the _Fields constant that matches name, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByName(java.lang.String name) {
                    return byName.get(name);
                }

                private final short _thriftId;
                private final java.lang.String _fieldName;

                _Fields(short thriftId, java.lang.String fieldName) {
                    _thriftId = thriftId;
                    _fieldName = fieldName;
                }

                public short getThriftFieldId() {
                    return _thriftId;
                }

                public java.lang.String getFieldName() {
                    return _fieldName;
                }
            }
            public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
            static {
                java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
                metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
                org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllShows_args.class, metaDataMap);
            }

            public findAllShows_args() {
            }

            /**
             * Performs a deep copy on <i>other</i>.
             */
            public findAllShows_args(findAllShows_args other) {
            }

            public findAllShows_args deepCopy() {
                return new findAllShows_args(this);
            }

            @Override
            public void clear() {
            }

            public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
                switch (field) {
                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.Object getFieldValue(_Fields field) {
                switch (field) {
                }
                throw new java.lang.IllegalStateException();
            }

            /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
            public boolean isSet(_Fields field) {
                if (field == null) {
                    throw new java.lang.IllegalArgumentException();
                }

                switch (field) {
                }
                throw new java.lang.IllegalStateException();
            }

            @Override
            public boolean equals(java.lang.Object that) {
                if (that == null)
                    return false;
                if (that instanceof findAllShows_args)
                    return this.equals((findAllShows_args)that);
                return false;
            }

            public boolean equals(findAllShows_args that) {
                if (that == null)
                    return false;
                if (this == that)
                    return true;

                return true;
            }

            @Override
            public int hashCode() {
                int hashCode = 1;

                return hashCode;
            }

            @Override
            public int compareTo(findAllShows_args other) {
                if (!getClass().equals(other.getClass())) {
                    return getClass().getName().compareTo(other.getClass().getName());
                }

                int lastComparison = 0;

                return 0;
            }

            @org.apache.thrift.annotation.Nullable
            public _Fields fieldForId(int fieldId) {
                return _Fields.findByThriftId(fieldId);
            }

            public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
                scheme(iprot).read(iprot, this);
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
                scheme(oprot).write(oprot, this);
            }

            @Override
            public java.lang.String toString() {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllShows_args(");
                boolean first = true;

                sb.append(")");
                return sb.toString();
            }

            public void validate() throws org.apache.thrift.TException {
                // check for required fields
                // check for sub-struct validity
            }

            private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
                try {
                    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
                try {
                    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private static class findAllShows_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public findAllShows_argsStandardScheme getScheme() {
                    return new findAllShows_argsStandardScheme();
                }
            }

            private static class findAllShows_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllShows_args> {

                public void read(org.apache.thrift.protocol.TProtocol iprot, findAllShows_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TField schemeField;
                    iprot.readStructBegin();
                    while (true)
                    {
                        schemeField = iprot.readFieldBegin();
                        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                            break;
                        }
                        switch (schemeField.id) {
                            default:
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        iprot.readFieldEnd();
                    }
                    iprot.readStructEnd();

                    // check for required fields of primitive type, which can't be checked in the validate method
                    struct.validate();
                }

                public void write(org.apache.thrift.protocol.TProtocol oprot, findAllShows_args struct) throws org.apache.thrift.TException {
                    struct.validate();

                    oprot.writeStructBegin(STRUCT_DESC);
                    oprot.writeFieldStop();
                    oprot.writeStructEnd();
                }

            }

            private static class findAllShows_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public findAllShows_argsTupleScheme getScheme() {
                    return new findAllShows_argsTupleScheme();
                }
            }

            private static class findAllShows_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllShows_args> {

                @Override
                public void write(org.apache.thrift.protocol.TProtocol prot, findAllShows_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                }

                @Override
                public void read(org.apache.thrift.protocol.TProtocol prot, findAllShows_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                }
            }

            private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
                return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
            }
        }

        public static class findAllShows_result implements org.apache.thrift.TBase<findAllShows_result, findAllShows_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllShows_result>   {
            private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllShows_result");

            private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

            private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findAllShows_resultStandardSchemeFactory();
            private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findAllShows_resultTupleSchemeFactory();

            public @org.apache.thrift.annotation.Nullable java.util.List<ShowDTO> success; // required

            /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
            public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                SUCCESS((short)0, "success");

                private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

                static {
                    for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                        byName.put(field.getFieldName(), field);
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByThriftId(int fieldId) {
                    switch(fieldId) {
                        case 0: // SUCCESS
                            return SUCCESS;
                        default:
                            return null;
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, throwing an exception
                 * if it is not found.
                 */
                public static _Fields findByThriftIdOrThrow(int fieldId) {
                    _Fields fields = findByThriftId(fieldId);
                    if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                    return fields;
                }

                /**
                 * Find the _Fields constant that matches name, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByName(java.lang.String name) {
                    return byName.get(name);
                }

                private final short _thriftId;
                private final java.lang.String _fieldName;

                _Fields(short thriftId, java.lang.String fieldName) {
                    _thriftId = thriftId;
                    _fieldName = fieldName;
                }

                public short getThriftFieldId() {
                    return _thriftId;
                }

                public java.lang.String getFieldName() {
                    return _fieldName;
                }
            }

            // isset id assignments
            public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
            static {
                java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
                tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShowDTO.class))));
                metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
                org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllShows_result.class, metaDataMap);
            }

            public findAllShows_result() {
            }

            public findAllShows_result(
                    java.util.List<ShowDTO> success)
            {
                this();
                this.success = success;
            }

            /**
             * Performs a deep copy on <i>other</i>.
             */
            public findAllShows_result(findAllShows_result other) {
                if (other.isSetSuccess()) {
                    java.util.List<ShowDTO> __this__success = new java.util.ArrayList<ShowDTO>(other.success.size());
                    for (ShowDTO other_element : other.success) {
                        __this__success.add(new ShowDTO(other_element));
                    }
                    this.success = __this__success;
                }
            }

            public findAllShows_result deepCopy() {
                return new findAllShows_result(this);
            }

            @Override
            public void clear() {
                this.success = null;
            }

            public int getSuccessSize() {
                return (this.success == null) ? 0 : this.success.size();
            }

            @org.apache.thrift.annotation.Nullable
            public java.util.Iterator<ShowDTO> getSuccessIterator() {
                return (this.success == null) ? null : this.success.iterator();
            }

            public void addToSuccess(ShowDTO elem) {
                if (this.success == null) {
                    this.success = new java.util.ArrayList<ShowDTO>();
                }
                this.success.add(elem);
            }

            @org.apache.thrift.annotation.Nullable
            public java.util.List<ShowDTO> getSuccess() {
                return this.success;
            }

            public findAllShows_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ShowDTO> success) {
                this.success = success;
                return this;
            }

            public void unsetSuccess() {
                this.success = null;
            }

            /** Returns true if field success is set (has been assigned a value) and false otherwise */
            public boolean isSetSuccess() {
                return this.success != null;
            }

            public void setSuccessIsSet(boolean value) {
                if (!value) {
                    this.success = null;
                }
            }

            public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
                switch (field) {
                    case SUCCESS:
                        if (value == null) {
                            unsetSuccess();
                        } else {
                            setSuccess((java.util.List<ShowDTO>)value);
                        }
                        break;

                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.Object getFieldValue(_Fields field) {
                switch (field) {
                    case SUCCESS:
                        return getSuccess();

                }
                throw new java.lang.IllegalStateException();
            }

            /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
            public boolean isSet(_Fields field) {
                if (field == null) {
                    throw new java.lang.IllegalArgumentException();
                }

                switch (field) {
                    case SUCCESS:
                        return isSetSuccess();
                }
                throw new java.lang.IllegalStateException();
            }

            @Override
            public boolean equals(java.lang.Object that) {
                if (that == null)
                    return false;
                if (that instanceof findAllShows_result)
                    return this.equals((findAllShows_result)that);
                return false;
            }

            public boolean equals(findAllShows_result that) {
                if (that == null)
                    return false;
                if (this == that)
                    return true;

                boolean this_present_success = true && this.isSetSuccess();
                boolean that_present_success = true && that.isSetSuccess();
                if (this_present_success || that_present_success) {
                    if (!(this_present_success && that_present_success))
                        return false;
                    if (!this.success.equals(that.success))
                        return false;
                }

                return true;
            }

            @Override
            public int hashCode() {
                int hashCode = 1;

                hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
                if (isSetSuccess())
                    hashCode = hashCode * 8191 + success.hashCode();

                return hashCode;
            }

            @Override
            public int compareTo(findAllShows_result other) {
                if (!getClass().equals(other.getClass())) {
                    return getClass().getName().compareTo(other.getClass().getName());
                }

                int lastComparison = 0;

                lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetSuccess()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                return 0;
            }

            @org.apache.thrift.annotation.Nullable
            public _Fields fieldForId(int fieldId) {
                return _Fields.findByThriftId(fieldId);
            }

            public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
                scheme(iprot).read(iprot, this);
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
                scheme(oprot).write(oprot, this);
            }

            @Override
            public java.lang.String toString() {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("findAllShows_result(");
                boolean first = true;

                sb.append("success:");
                if (this.success == null) {
                    sb.append("null");
                } else {
                    sb.append(this.success);
                }
                first = false;
                sb.append(")");
                return sb.toString();
            }

            public void validate() throws org.apache.thrift.TException {
                // check for required fields
                // check for sub-struct validity
            }

            private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
                try {
                    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
                try {
                    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private static class findAllShows_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public findAllShows_resultStandardScheme getScheme() {
                    return new findAllShows_resultStandardScheme();
                }
            }

            private static class findAllShows_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findAllShows_result> {

                public void read(org.apache.thrift.protocol.TProtocol iprot, findAllShows_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TField schemeField;
                    iprot.readStructBegin();
                    while (true)
                    {
                        schemeField = iprot.readFieldBegin();
                        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                            break;
                        }
                        switch (schemeField.id) {
                            case 0: // SUCCESS
                                if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                    {
                                        org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                        struct.success = new java.util.ArrayList<ShowDTO>(_list0.size);
                                        @org.apache.thrift.annotation.Nullable ShowDTO _elem1;
                                        for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                                        {
                                            _elem1 = new ShowDTO();
                                            _elem1.read(iprot);
                                            struct.success.add(_elem1);
                                        }
                                        iprot.readListEnd();
                                    }
                                    struct.setSuccessIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            default:
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        iprot.readFieldEnd();
                    }
                    iprot.readStructEnd();

                    // check for required fields of primitive type, which can't be checked in the validate method
                    struct.validate();
                }

                public void write(org.apache.thrift.protocol.TProtocol oprot, findAllShows_result struct) throws org.apache.thrift.TException {
                    struct.validate();

                    oprot.writeStructBegin(STRUCT_DESC);
                    if (struct.success != null) {
                        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                        {
                            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                            for (ShowDTO _iter3 : struct.success)
                            {
                                _iter3.write(oprot);
                            }
                            oprot.writeListEnd();
                        }
                        oprot.writeFieldEnd();
                    }
                    oprot.writeFieldStop();
                    oprot.writeStructEnd();
                }

            }

            private static class findAllShows_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public findAllShows_resultTupleScheme getScheme() {
                    return new findAllShows_resultTupleScheme();
                }
            }

            private static class findAllShows_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findAllShows_result> {

                @Override
                public void write(org.apache.thrift.protocol.TProtocol prot, findAllShows_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet optionals = new java.util.BitSet();
                    if (struct.isSetSuccess()) {
                        optionals.set(0);
                    }
                    oprot.writeBitSet(optionals, 1);
                    if (struct.isSetSuccess()) {
                        {
                            oprot.writeI32(struct.success.size());
                            for (ShowDTO _iter4 : struct.success)
                            {
                                _iter4.write(oprot);
                            }
                        }
                    }
                }

                @Override
                public void read(org.apache.thrift.protocol.TProtocol prot, findAllShows_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet incoming = iprot.readBitSet(1);
                    if (incoming.get(0)) {
                        {
                            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                            struct.success = new java.util.ArrayList<ShowDTO>(_list5.size);
                            @org.apache.thrift.annotation.Nullable ShowDTO _elem6;
                            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                            {
                                _elem6 = new ShowDTO();
                                _elem6.read(iprot);
                                struct.success.add(_elem6);
                            }
                        }
                        struct.setSuccessIsSet(true);
                    }
                }
            }

            private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
                return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
            }
        }

        public static class ticketsSold_args implements org.apache.thrift.TBase<ticketsSold_args, ticketsSold_args._Fields>, java.io.Serializable, Cloneable, Comparable<ticketsSold_args>   {
            private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketsSold_args");

            private static final org.apache.thrift.protocol.TField SHOW_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("showDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);
            private static final org.apache.thrift.protocol.TField TICKET_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketDTO", org.apache.thrift.protocol.TType.STRUCT, (short)2);

            private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketsSold_argsStandardSchemeFactory();
            private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketsSold_argsTupleSchemeFactory();

            public @org.apache.thrift.annotation.Nullable ShowDTO showDTO; // required
            public @org.apache.thrift.annotation.Nullable TicketDTO ticketDTO; // required

            /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
            public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                SHOW_DTO((short)1, "showDTO"),
                TICKET_DTO((short)2, "ticketDTO");

                private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

                static {
                    for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                        byName.put(field.getFieldName(), field);
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByThriftId(int fieldId) {
                    switch(fieldId) {
                        case 1: // SHOW_DTO
                            return SHOW_DTO;
                        case 2: // TICKET_DTO
                            return TICKET_DTO;
                        default:
                            return null;
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, throwing an exception
                 * if it is not found.
                 */
                public static _Fields findByThriftIdOrThrow(int fieldId) {
                    _Fields fields = findByThriftId(fieldId);
                    if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                    return fields;
                }

                /**
                 * Find the _Fields constant that matches name, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByName(java.lang.String name) {
                    return byName.get(name);
                }

                private final short _thriftId;
                private final java.lang.String _fieldName;

                _Fields(short thriftId, java.lang.String fieldName) {
                    _thriftId = thriftId;
                    _fieldName = fieldName;
                }

                public short getThriftFieldId() {
                    return _thriftId;
                }

                public java.lang.String getFieldName() {
                    return _fieldName;
                }
            }

            // isset id assignments
            public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
            static {
                java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
                tmpMap.put(_Fields.SHOW_DTO, new org.apache.thrift.meta_data.FieldMetaData("showDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShowDTO.class)));
                tmpMap.put(_Fields.TICKET_DTO, new org.apache.thrift.meta_data.FieldMetaData("ticketDTO", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TicketDTO.class)));
                metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
                org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketsSold_args.class, metaDataMap);
            }

            public ticketsSold_args() {
            }

            public ticketsSold_args(
                    ShowDTO showDTO,
                    TicketDTO ticketDTO)
            {
                this();
                this.showDTO = showDTO;
                this.ticketDTO = ticketDTO;
            }

            /**
             * Performs a deep copy on <i>other</i>.
             */
            public ticketsSold_args(ticketsSold_args other) {
                if (other.isSetShowDTO()) {
                    this.showDTO = new ShowDTO(other.showDTO);
                }
                if (other.isSetTicketDTO()) {
                    this.ticketDTO = new TicketDTO(other.ticketDTO);
                }
            }

            public ticketsSold_args deepCopy() {
                return new ticketsSold_args(this);
            }

            @Override
            public void clear() {
                this.showDTO = null;
                this.ticketDTO = null;
            }

            @org.apache.thrift.annotation.Nullable
            public ShowDTO getShowDTO() {
                return this.showDTO;
            }

            public ticketsSold_args setShowDTO(@org.apache.thrift.annotation.Nullable ShowDTO showDTO) {
                this.showDTO = showDTO;
                return this;
            }

            public void unsetShowDTO() {
                this.showDTO = null;
            }

            /** Returns true if field showDTO is set (has been assigned a value) and false otherwise */
            public boolean isSetShowDTO() {
                return this.showDTO != null;
            }

            public void setShowDTOIsSet(boolean value) {
                if (!value) {
                    this.showDTO = null;
                }
            }

            @org.apache.thrift.annotation.Nullable
            public TicketDTO getTicketDTO() {
                return this.ticketDTO;
            }

            public ticketsSold_args setTicketDTO(@org.apache.thrift.annotation.Nullable TicketDTO ticketDTO) {
                this.ticketDTO = ticketDTO;
                return this;
            }

            public void unsetTicketDTO() {
                this.ticketDTO = null;
            }

            /** Returns true if field ticketDTO is set (has been assigned a value) and false otherwise */
            public boolean isSetTicketDTO() {
                return this.ticketDTO != null;
            }

            public void setTicketDTOIsSet(boolean value) {
                if (!value) {
                    this.ticketDTO = null;
                }
            }

            public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
                switch (field) {
                    case SHOW_DTO:
                        if (value == null) {
                            unsetShowDTO();
                        } else {
                            setShowDTO((ShowDTO)value);
                        }
                        break;

                    case TICKET_DTO:
                        if (value == null) {
                            unsetTicketDTO();
                        } else {
                            setTicketDTO((TicketDTO)value);
                        }
                        break;

                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.Object getFieldValue(_Fields field) {
                switch (field) {
                    case SHOW_DTO:
                        return getShowDTO();

                    case TICKET_DTO:
                        return getTicketDTO();

                }
                throw new java.lang.IllegalStateException();
            }

            /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
            public boolean isSet(_Fields field) {
                if (field == null) {
                    throw new java.lang.IllegalArgumentException();
                }

                switch (field) {
                    case SHOW_DTO:
                        return isSetShowDTO();
                    case TICKET_DTO:
                        return isSetTicketDTO();
                }
                throw new java.lang.IllegalStateException();
            }

            @Override
            public boolean equals(java.lang.Object that) {
                if (that == null)
                    return false;
                if (that instanceof ticketsSold_args)
                    return this.equals((ticketsSold_args)that);
                return false;
            }

            public boolean equals(ticketsSold_args that) {
                if (that == null)
                    return false;
                if (this == that)
                    return true;

                boolean this_present_showDTO = true && this.isSetShowDTO();
                boolean that_present_showDTO = true && that.isSetShowDTO();
                if (this_present_showDTO || that_present_showDTO) {
                    if (!(this_present_showDTO && that_present_showDTO))
                        return false;
                    if (!this.showDTO.equals(that.showDTO))
                        return false;
                }

                boolean this_present_ticketDTO = true && this.isSetTicketDTO();
                boolean that_present_ticketDTO = true && that.isSetTicketDTO();
                if (this_present_ticketDTO || that_present_ticketDTO) {
                    if (!(this_present_ticketDTO && that_present_ticketDTO))
                        return false;
                    if (!this.ticketDTO.equals(that.ticketDTO))
                        return false;
                }

                return true;
            }

            @Override
            public int hashCode() {
                int hashCode = 1;

                hashCode = hashCode * 8191 + ((isSetShowDTO()) ? 131071 : 524287);
                if (isSetShowDTO())
                    hashCode = hashCode * 8191 + showDTO.hashCode();

                hashCode = hashCode * 8191 + ((isSetTicketDTO()) ? 131071 : 524287);
                if (isSetTicketDTO())
                    hashCode = hashCode * 8191 + ticketDTO.hashCode();

                return hashCode;
            }

            @Override
            public int compareTo(ticketsSold_args other) {
                if (!getClass().equals(other.getClass())) {
                    return getClass().getName().compareTo(other.getClass().getName());
                }

                int lastComparison = 0;

                lastComparison = java.lang.Boolean.valueOf(isSetShowDTO()).compareTo(other.isSetShowDTO());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetShowDTO()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showDTO, other.showDTO);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                lastComparison = java.lang.Boolean.valueOf(isSetTicketDTO()).compareTo(other.isSetTicketDTO());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetTicketDTO()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketDTO, other.ticketDTO);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                return 0;
            }

            @org.apache.thrift.annotation.Nullable
            public _Fields fieldForId(int fieldId) {
                return _Fields.findByThriftId(fieldId);
            }

            public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
                scheme(iprot).read(iprot, this);
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
                scheme(oprot).write(oprot, this);
            }

            @Override
            public java.lang.String toString() {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketsSold_args(");
                boolean first = true;

                sb.append("showDTO:");
                if (this.showDTO == null) {
                    sb.append("null");
                } else {
                    sb.append(this.showDTO);
                }
                first = false;
                if (!first) sb.append(", ");
                sb.append("ticketDTO:");
                if (this.ticketDTO == null) {
                    sb.append("null");
                } else {
                    sb.append(this.ticketDTO);
                }
                first = false;
                sb.append(")");
                return sb.toString();
            }

            public void validate() throws org.apache.thrift.TException {
                // check for required fields
                // check for sub-struct validity
                if (showDTO != null) {
                    showDTO.validate();
                }
                if (ticketDTO != null) {
                    ticketDTO.validate();
                }
            }

            private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
                try {
                    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
                try {
                    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private static class ticketsSold_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public ticketsSold_argsStandardScheme getScheme() {
                    return new ticketsSold_argsStandardScheme();
                }
            }

            private static class ticketsSold_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketsSold_args> {

                public void read(org.apache.thrift.protocol.TProtocol iprot, ticketsSold_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TField schemeField;
                    iprot.readStructBegin();
                    while (true)
                    {
                        schemeField = iprot.readFieldBegin();
                        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                            break;
                        }
                        switch (schemeField.id) {
                            case 1: // SHOW_DTO
                                if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                    struct.showDTO = new ShowDTO();
                                    struct.showDTO.read(iprot);
                                    struct.setShowDTOIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            case 2: // TICKET_DTO
                                if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                    struct.ticketDTO = new TicketDTO();
                                    struct.ticketDTO.read(iprot);
                                    struct.setTicketDTOIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            default:
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        iprot.readFieldEnd();
                    }
                    iprot.readStructEnd();

                    // check for required fields of primitive type, which can't be checked in the validate method
                    struct.validate();
                }

                public void write(org.apache.thrift.protocol.TProtocol oprot, ticketsSold_args struct) throws org.apache.thrift.TException {
                    struct.validate();

                    oprot.writeStructBegin(STRUCT_DESC);
                    if (struct.showDTO != null) {
                        oprot.writeFieldBegin(SHOW_DTO_FIELD_DESC);
                        struct.showDTO.write(oprot);
                        oprot.writeFieldEnd();
                    }
                    if (struct.ticketDTO != null) {
                        oprot.writeFieldBegin(TICKET_DTO_FIELD_DESC);
                        struct.ticketDTO.write(oprot);
                        oprot.writeFieldEnd();
                    }
                    oprot.writeFieldStop();
                    oprot.writeStructEnd();
                }

            }

            private static class ticketsSold_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public ticketsSold_argsTupleScheme getScheme() {
                    return new ticketsSold_argsTupleScheme();
                }
            }

            private static class ticketsSold_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketsSold_args> {

                @Override
                public void write(org.apache.thrift.protocol.TProtocol prot, ticketsSold_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet optionals = new java.util.BitSet();
                    if (struct.isSetShowDTO()) {
                        optionals.set(0);
                    }
                    if (struct.isSetTicketDTO()) {
                        optionals.set(1);
                    }
                    oprot.writeBitSet(optionals, 2);
                    if (struct.isSetShowDTO()) {
                        struct.showDTO.write(oprot);
                    }
                    if (struct.isSetTicketDTO()) {
                        struct.ticketDTO.write(oprot);
                    }
                }

                @Override
                public void read(org.apache.thrift.protocol.TProtocol prot, ticketsSold_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet incoming = iprot.readBitSet(2);
                    if (incoming.get(0)) {
                        struct.showDTO = new ShowDTO();
                        struct.showDTO.read(iprot);
                        struct.setShowDTOIsSet(true);
                    }
                    if (incoming.get(1)) {
                        struct.ticketDTO = new TicketDTO();
                        struct.ticketDTO.read(iprot);
                        struct.setTicketDTOIsSet(true);
                    }
                }
            }

            private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
                return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
            }
        }

        public static class ticketsSold_result implements org.apache.thrift.TBase<ticketsSold_result, ticketsSold_result._Fields>, java.io.Serializable, Cloneable, Comparable<ticketsSold_result>   {
            private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketsSold_result");


            private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketsSold_resultStandardSchemeFactory();
            private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketsSold_resultTupleSchemeFactory();


            /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
            public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                ;

                private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

                static {
                    for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                        byName.put(field.getFieldName(), field);
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByThriftId(int fieldId) {
                    switch(fieldId) {
                        default:
                            return null;
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, throwing an exception
                 * if it is not found.
                 */
                public static _Fields findByThriftIdOrThrow(int fieldId) {
                    _Fields fields = findByThriftId(fieldId);
                    if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                    return fields;
                }

                /**
                 * Find the _Fields constant that matches name, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByName(java.lang.String name) {
                    return byName.get(name);
                }

                private final short _thriftId;
                private final java.lang.String _fieldName;

                _Fields(short thriftId, java.lang.String fieldName) {
                    _thriftId = thriftId;
                    _fieldName = fieldName;
                }

                public short getThriftFieldId() {
                    return _thriftId;
                }

                public java.lang.String getFieldName() {
                    return _fieldName;
                }
            }
            public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
            static {
                java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
                metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
                org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketsSold_result.class, metaDataMap);
            }

            public ticketsSold_result() {
            }

            /**
             * Performs a deep copy on <i>other</i>.
             */
            public ticketsSold_result(ticketsSold_result other) {
            }

            public ticketsSold_result deepCopy() {
                return new ticketsSold_result(this);
            }

            @Override
            public void clear() {
            }

            public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
                switch (field) {
                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.Object getFieldValue(_Fields field) {
                switch (field) {
                }
                throw new java.lang.IllegalStateException();
            }

            /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
            public boolean isSet(_Fields field) {
                if (field == null) {
                    throw new java.lang.IllegalArgumentException();
                }

                switch (field) {
                }
                throw new java.lang.IllegalStateException();
            }

            @Override
            public boolean equals(java.lang.Object that) {
                if (that == null)
                    return false;
                if (that instanceof ticketsSold_result)
                    return this.equals((ticketsSold_result)that);
                return false;
            }

            public boolean equals(ticketsSold_result that) {
                if (that == null)
                    return false;
                if (this == that)
                    return true;

                return true;
            }

            @Override
            public int hashCode() {
                int hashCode = 1;

                return hashCode;
            }

            @Override
            public int compareTo(ticketsSold_result other) {
                if (!getClass().equals(other.getClass())) {
                    return getClass().getName().compareTo(other.getClass().getName());
                }

                int lastComparison = 0;

                return 0;
            }

            @org.apache.thrift.annotation.Nullable
            public _Fields fieldForId(int fieldId) {
                return _Fields.findByThriftId(fieldId);
            }

            public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
                scheme(iprot).read(iprot, this);
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
                scheme(oprot).write(oprot, this);
            }

            @Override
            public java.lang.String toString() {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketsSold_result(");
                boolean first = true;

                sb.append(")");
                return sb.toString();
            }

            public void validate() throws org.apache.thrift.TException {
                // check for required fields
                // check for sub-struct validity
            }

            private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
                try {
                    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
                try {
                    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private static class ticketsSold_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public ticketsSold_resultStandardScheme getScheme() {
                    return new ticketsSold_resultStandardScheme();
                }
            }

            private static class ticketsSold_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketsSold_result> {

                public void read(org.apache.thrift.protocol.TProtocol iprot, ticketsSold_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TField schemeField;
                    iprot.readStructBegin();
                    while (true)
                    {
                        schemeField = iprot.readFieldBegin();
                        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                            break;
                        }
                        switch (schemeField.id) {
                            default:
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        iprot.readFieldEnd();
                    }
                    iprot.readStructEnd();

                    // check for required fields of primitive type, which can't be checked in the validate method
                    struct.validate();
                }

                public void write(org.apache.thrift.protocol.TProtocol oprot, ticketsSold_result struct) throws org.apache.thrift.TException {
                    struct.validate();

                    oprot.writeStructBegin(STRUCT_DESC);
                    oprot.writeFieldStop();
                    oprot.writeStructEnd();
                }

            }

            private static class ticketsSold_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public ticketsSold_resultTupleScheme getScheme() {
                    return new ticketsSold_resultTupleScheme();
                }
            }

            private static class ticketsSold_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketsSold_result> {

                @Override
                public void write(org.apache.thrift.protocol.TProtocol prot, ticketsSold_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                }

                @Override
                public void read(org.apache.thrift.protocol.TProtocol prot, ticketsSold_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                }
            }

            private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
                return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
            }
        }

        public static class logOut_args implements org.apache.thrift.TBase<logOut_args, logOut_args._Fields>, java.io.Serializable, Cloneable, Comparable<logOut_args>   {
            private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logOut_args");

            private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
            private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)2);
            private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);

            private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logOut_argsStandardSchemeFactory();
            private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logOut_argsTupleSchemeFactory();

            public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
            public @org.apache.thrift.annotation.Nullable java.lang.String host; // required
            public int port; // required

            /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
            public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                USERNAME((short)1, "username"),
                HOST((short)2, "host"),
                PORT((short)3, "port");

                private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

                static {
                    for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                        byName.put(field.getFieldName(), field);
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByThriftId(int fieldId) {
                    switch(fieldId) {
                        case 1: // USERNAME
                            return USERNAME;
                        case 2: // HOST
                            return HOST;
                        case 3: // PORT
                            return PORT;
                        default:
                            return null;
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, throwing an exception
                 * if it is not found.
                 */
                public static _Fields findByThriftIdOrThrow(int fieldId) {
                    _Fields fields = findByThriftId(fieldId);
                    if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                    return fields;
                }

                /**
                 * Find the _Fields constant that matches name, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByName(java.lang.String name) {
                    return byName.get(name);
                }

                private final short _thriftId;
                private final java.lang.String _fieldName;

                _Fields(short thriftId, java.lang.String fieldName) {
                    _thriftId = thriftId;
                    _fieldName = fieldName;
                }

                public short getThriftFieldId() {
                    return _thriftId;
                }

                public java.lang.String getFieldName() {
                    return _fieldName;
                }
            }

            // isset id assignments
            private static final int __PORT_ISSET_ID = 0;
            private byte __isset_bitfield = 0;
            public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
            static {
                java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
                tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
                tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
                tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
                metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
                org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logOut_args.class, metaDataMap);
            }

            public logOut_args() {
            }

            public logOut_args(
                    java.lang.String username,
                    java.lang.String host,
                    int port)
            {
                this();
                this.username = username;
                this.host = host;
                this.port = port;
                setPortIsSet(true);
            }

            /**
             * Performs a deep copy on <i>other</i>.
             */
            public logOut_args(logOut_args other) {
                __isset_bitfield = other.__isset_bitfield;
                if (other.isSetUsername()) {
                    this.username = other.username;
                }
                if (other.isSetHost()) {
                    this.host = other.host;
                }
                this.port = other.port;
            }

            public logOut_args deepCopy() {
                return new logOut_args(this);
            }

            @Override
            public void clear() {
                this.username = null;
                this.host = null;
                setPortIsSet(false);
                this.port = 0;
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.String getUsername() {
                return this.username;
            }

            public logOut_args setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
                this.username = username;
                return this;
            }

            public void unsetUsername() {
                this.username = null;
            }

            /** Returns true if field username is set (has been assigned a value) and false otherwise */
            public boolean isSetUsername() {
                return this.username != null;
            }

            public void setUsernameIsSet(boolean value) {
                if (!value) {
                    this.username = null;
                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.String getHost() {
                return this.host;
            }

            public logOut_args setHost(@org.apache.thrift.annotation.Nullable java.lang.String host) {
                this.host = host;
                return this;
            }

            public void unsetHost() {
                this.host = null;
            }

            /** Returns true if field host is set (has been assigned a value) and false otherwise */
            public boolean isSetHost() {
                return this.host != null;
            }

            public void setHostIsSet(boolean value) {
                if (!value) {
                    this.host = null;
                }
            }

            public int getPort() {
                return this.port;
            }

            public logOut_args setPort(int port) {
                this.port = port;
                setPortIsSet(true);
                return this;
            }

            public void unsetPort() {
                __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
            }

            /** Returns true if field port is set (has been assigned a value) and false otherwise */
            public boolean isSetPort() {
                return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
            }

            public void setPortIsSet(boolean value) {
                __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
            }

            public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
                switch (field) {
                    case USERNAME:
                        if (value == null) {
                            unsetUsername();
                        } else {
                            setUsername((java.lang.String)value);
                        }
                        break;

                    case HOST:
                        if (value == null) {
                            unsetHost();
                        } else {
                            setHost((java.lang.String)value);
                        }
                        break;

                    case PORT:
                        if (value == null) {
                            unsetPort();
                        } else {
                            setPort((java.lang.Integer)value);
                        }
                        break;

                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.Object getFieldValue(_Fields field) {
                switch (field) {
                    case USERNAME:
                        return getUsername();

                    case HOST:
                        return getHost();

                    case PORT:
                        return getPort();

                }
                throw new java.lang.IllegalStateException();
            }

            /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
            public boolean isSet(_Fields field) {
                if (field == null) {
                    throw new java.lang.IllegalArgumentException();
                }

                switch (field) {
                    case USERNAME:
                        return isSetUsername();
                    case HOST:
                        return isSetHost();
                    case PORT:
                        return isSetPort();
                }
                throw new java.lang.IllegalStateException();
            }

            @Override
            public boolean equals(java.lang.Object that) {
                if (that == null)
                    return false;
                if (that instanceof logOut_args)
                    return this.equals((logOut_args)that);
                return false;
            }

            public boolean equals(logOut_args that) {
                if (that == null)
                    return false;
                if (this == that)
                    return true;

                boolean this_present_username = true && this.isSetUsername();
                boolean that_present_username = true && that.isSetUsername();
                if (this_present_username || that_present_username) {
                    if (!(this_present_username && that_present_username))
                        return false;
                    if (!this.username.equals(that.username))
                        return false;
                }

                boolean this_present_host = true && this.isSetHost();
                boolean that_present_host = true && that.isSetHost();
                if (this_present_host || that_present_host) {
                    if (!(this_present_host && that_present_host))
                        return false;
                    if (!this.host.equals(that.host))
                        return false;
                }

                boolean this_present_port = true;
                boolean that_present_port = true;
                if (this_present_port || that_present_port) {
                    if (!(this_present_port && that_present_port))
                        return false;
                    if (this.port != that.port)
                        return false;
                }

                return true;
            }

            @Override
            public int hashCode() {
                int hashCode = 1;

                hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
                if (isSetUsername())
                    hashCode = hashCode * 8191 + username.hashCode();

                hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
                if (isSetHost())
                    hashCode = hashCode * 8191 + host.hashCode();

                hashCode = hashCode * 8191 + port;

                return hashCode;
            }

            @Override
            public int compareTo(logOut_args other) {
                if (!getClass().equals(other.getClass())) {
                    return getClass().getName().compareTo(other.getClass().getName());
                }

                int lastComparison = 0;

                lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetUsername()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                lastComparison = java.lang.Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetHost()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetPort()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                return 0;
            }

            @org.apache.thrift.annotation.Nullable
            public _Fields fieldForId(int fieldId) {
                return _Fields.findByThriftId(fieldId);
            }

            public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
                scheme(iprot).read(iprot, this);
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
                scheme(oprot).write(oprot, this);
            }

            @Override
            public java.lang.String toString() {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("logOut_args(");
                boolean first = true;

                sb.append("username:");
                if (this.username == null) {
                    sb.append("null");
                } else {
                    sb.append(this.username);
                }
                first = false;
                if (!first) sb.append(", ");
                sb.append("host:");
                if (this.host == null) {
                    sb.append("null");
                } else {
                    sb.append(this.host);
                }
                first = false;
                if (!first) sb.append(", ");
                sb.append("port:");
                sb.append(this.port);
                first = false;
                sb.append(")");
                return sb.toString();
            }

            public void validate() throws org.apache.thrift.TException {
                // check for required fields
                // check for sub-struct validity
            }

            private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
                try {
                    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
                try {
                    // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                    __isset_bitfield = 0;
                    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private static class logOut_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public logOut_argsStandardScheme getScheme() {
                    return new logOut_argsStandardScheme();
                }
            }

            private static class logOut_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logOut_args> {

                public void read(org.apache.thrift.protocol.TProtocol iprot, logOut_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TField schemeField;
                    iprot.readStructBegin();
                    while (true)
                    {
                        schemeField = iprot.readFieldBegin();
                        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                            break;
                        }
                        switch (schemeField.id) {
                            case 1: // USERNAME
                                if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                    struct.username = iprot.readString();
                                    struct.setUsernameIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            case 2: // HOST
                                if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                    struct.host = iprot.readString();
                                    struct.setHostIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            case 3: // PORT
                                if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                    struct.port = iprot.readI32();
                                    struct.setPortIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            default:
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        iprot.readFieldEnd();
                    }
                    iprot.readStructEnd();

                    // check for required fields of primitive type, which can't be checked in the validate method
                    struct.validate();
                }

                public void write(org.apache.thrift.protocol.TProtocol oprot, logOut_args struct) throws org.apache.thrift.TException {
                    struct.validate();

                    oprot.writeStructBegin(STRUCT_DESC);
                    if (struct.username != null) {
                        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                        oprot.writeString(struct.username);
                        oprot.writeFieldEnd();
                    }
                    if (struct.host != null) {
                        oprot.writeFieldBegin(HOST_FIELD_DESC);
                        oprot.writeString(struct.host);
                        oprot.writeFieldEnd();
                    }
                    oprot.writeFieldBegin(PORT_FIELD_DESC);
                    oprot.writeI32(struct.port);
                    oprot.writeFieldEnd();
                    oprot.writeFieldStop();
                    oprot.writeStructEnd();
                }

            }

            private static class logOut_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public logOut_argsTupleScheme getScheme() {
                    return new logOut_argsTupleScheme();
                }
            }

            private static class logOut_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logOut_args> {

                @Override
                public void write(org.apache.thrift.protocol.TProtocol prot, logOut_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet optionals = new java.util.BitSet();
                    if (struct.isSetUsername()) {
                        optionals.set(0);
                    }
                    if (struct.isSetHost()) {
                        optionals.set(1);
                    }
                    if (struct.isSetPort()) {
                        optionals.set(2);
                    }
                    oprot.writeBitSet(optionals, 3);
                    if (struct.isSetUsername()) {
                        oprot.writeString(struct.username);
                    }
                    if (struct.isSetHost()) {
                        oprot.writeString(struct.host);
                    }
                    if (struct.isSetPort()) {
                        oprot.writeI32(struct.port);
                    }
                }

                @Override
                public void read(org.apache.thrift.protocol.TProtocol prot, logOut_args struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet incoming = iprot.readBitSet(3);
                    if (incoming.get(0)) {
                        struct.username = iprot.readString();
                        struct.setUsernameIsSet(true);
                    }
                    if (incoming.get(1)) {
                        struct.host = iprot.readString();
                        struct.setHostIsSet(true);
                    }
                    if (incoming.get(2)) {
                        struct.port = iprot.readI32();
                        struct.setPortIsSet(true);
                    }
                }
            }

            private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
                return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
            }
        }

        public static class logOut_result implements org.apache.thrift.TBase<logOut_result, logOut_result._Fields>, java.io.Serializable, Cloneable, Comparable<logOut_result>   {
            private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logOut_result");

            private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

            private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logOut_resultStandardSchemeFactory();
            private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logOut_resultTupleSchemeFactory();

            public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

            /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
            public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                SUCCESS((short)0, "success");

                private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

                static {
                    for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                        byName.put(field.getFieldName(), field);
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByThriftId(int fieldId) {
                    switch(fieldId) {
                        case 0: // SUCCESS
                            return SUCCESS;
                        default:
                            return null;
                    }
                }

                /**
                 * Find the _Fields constant that matches fieldId, throwing an exception
                 * if it is not found.
                 */
                public static _Fields findByThriftIdOrThrow(int fieldId) {
                    _Fields fields = findByThriftId(fieldId);
                    if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                    return fields;
                }

                /**
                 * Find the _Fields constant that matches name, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByName(java.lang.String name) {
                    return byName.get(name);
                }

                private final short _thriftId;
                private final java.lang.String _fieldName;

                _Fields(short thriftId, java.lang.String fieldName) {
                    _thriftId = thriftId;
                    _fieldName = fieldName;
                }

                public short getThriftFieldId() {
                    return _thriftId;
                }

                public java.lang.String getFieldName() {
                    return _fieldName;
                }
            }

            // isset id assignments
            public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
            static {
                java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
                tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
                metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
                org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logOut_result.class, metaDataMap);
            }

            public logOut_result() {
            }

            public logOut_result(
                    java.lang.String success)
            {
                this();
                this.success = success;
            }

            /**
             * Performs a deep copy on <i>other</i>.
             */
            public logOut_result(logOut_result other) {
                if (other.isSetSuccess()) {
                    this.success = other.success;
                }
            }

            public logOut_result deepCopy() {
                return new logOut_result(this);
            }

            @Override
            public void clear() {
                this.success = null;
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.String getSuccess() {
                return this.success;
            }

            public logOut_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
                this.success = success;
                return this;
            }

            public void unsetSuccess() {
                this.success = null;
            }

            /** Returns true if field success is set (has been assigned a value) and false otherwise */
            public boolean isSetSuccess() {
                return this.success != null;
            }

            public void setSuccessIsSet(boolean value) {
                if (!value) {
                    this.success = null;
                }
            }

            public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
                switch (field) {
                    case SUCCESS:
                        if (value == null) {
                            unsetSuccess();
                        } else {
                            setSuccess((java.lang.String)value);
                        }
                        break;

                }
            }

            @org.apache.thrift.annotation.Nullable
            public java.lang.Object getFieldValue(_Fields field) {
                switch (field) {
                    case SUCCESS:
                        return getSuccess();

                }
                throw new java.lang.IllegalStateException();
            }

            /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
            public boolean isSet(_Fields field) {
                if (field == null) {
                    throw new java.lang.IllegalArgumentException();
                }

                switch (field) {
                    case SUCCESS:
                        return isSetSuccess();
                }
                throw new java.lang.IllegalStateException();
            }

            @Override
            public boolean equals(java.lang.Object that) {
                if (that == null)
                    return false;
                if (that instanceof logOut_result)
                    return this.equals((logOut_result)that);
                return false;
            }

            public boolean equals(logOut_result that) {
                if (that == null)
                    return false;
                if (this == that)
                    return true;

                boolean this_present_success = true && this.isSetSuccess();
                boolean that_present_success = true && that.isSetSuccess();
                if (this_present_success || that_present_success) {
                    if (!(this_present_success && that_present_success))
                        return false;
                    if (!this.success.equals(that.success))
                        return false;
                }

                return true;
            }

            @Override
            public int hashCode() {
                int hashCode = 1;

                hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
                if (isSetSuccess())
                    hashCode = hashCode * 8191 + success.hashCode();

                return hashCode;
            }

            @Override
            public int compareTo(logOut_result other) {
                if (!getClass().equals(other.getClass())) {
                    return getClass().getName().compareTo(other.getClass().getName());
                }

                int lastComparison = 0;

                lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
                if (lastComparison != 0) {
                    return lastComparison;
                }
                if (isSetSuccess()) {
                    lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                    if (lastComparison != 0) {
                        return lastComparison;
                    }
                }
                return 0;
            }

            @org.apache.thrift.annotation.Nullable
            public _Fields fieldForId(int fieldId) {
                return _Fields.findByThriftId(fieldId);
            }

            public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
                scheme(iprot).read(iprot, this);
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
                scheme(oprot).write(oprot, this);
            }

            @Override
            public java.lang.String toString() {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("logOut_result(");
                boolean first = true;

                sb.append("success:");
                if (this.success == null) {
                    sb.append("null");
                } else {
                    sb.append(this.success);
                }
                first = false;
                sb.append(")");
                return sb.toString();
            }

            public void validate() throws org.apache.thrift.TException {
                // check for required fields
                // check for sub-struct validity
            }

            private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
                try {
                    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
                try {
                    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
                } catch (org.apache.thrift.TException te) {
                    throw new java.io.IOException(te);
                }
            }

            private static class logOut_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public logOut_resultStandardScheme getScheme() {
                    return new logOut_resultStandardScheme();
                }
            }

            private static class logOut_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logOut_result> {

                public void read(org.apache.thrift.protocol.TProtocol iprot, logOut_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TField schemeField;
                    iprot.readStructBegin();
                    while (true)
                    {
                        schemeField = iprot.readFieldBegin();
                        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                            break;
                        }
                        switch (schemeField.id) {
                            case 0: // SUCCESS
                                if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                    struct.success = iprot.readString();
                                    struct.setSuccessIsSet(true);
                                } else {
                                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                                }
                                break;
                            default:
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        iprot.readFieldEnd();
                    }
                    iprot.readStructEnd();

                    // check for required fields of primitive type, which can't be checked in the validate method
                    struct.validate();
                }

                public void write(org.apache.thrift.protocol.TProtocol oprot, logOut_result struct) throws org.apache.thrift.TException {
                    struct.validate();

                    oprot.writeStructBegin(STRUCT_DESC);
                    if (struct.success != null) {
                        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                        oprot.writeString(struct.success);
                        oprot.writeFieldEnd();
                    }
                    oprot.writeFieldStop();
                    oprot.writeStructEnd();
                }

            }

            private static class logOut_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                public logOut_resultTupleScheme getScheme() {
                    return new logOut_resultTupleScheme();
                }
            }

            private static class logOut_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logOut_result> {

                @Override
                public void write(org.apache.thrift.protocol.TProtocol prot, logOut_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet optionals = new java.util.BitSet();
                    if (struct.isSetSuccess()) {
                        optionals.set(0);
                    }
                    oprot.writeBitSet(optionals, 1);
                    if (struct.isSetSuccess()) {
                        oprot.writeString(struct.success);
                    }
                }

                @Override
                public void read(org.apache.thrift.protocol.TProtocol prot, logOut_result struct) throws org.apache.thrift.TException {
                    org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                    java.util.BitSet incoming = iprot.readBitSet(1);
                    if (incoming.get(0)) {
                        struct.success = iprot.readString();
                        struct.setSuccessIsSet(true);
                    }
                }
            }

            private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
                return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
            }
        }

    }
