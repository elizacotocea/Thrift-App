/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-04-29")
public class ShowDTO implements org.apache.thrift.TBase<ShowDTO, ShowDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ShowDTO> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShowDTO");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_TIMP_FIELD_DESC = new org.apache.thrift.protocol.TField("dataTimp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NR_AVAILABLE_SEATS_FIELD_DESC = new org.apache.thrift.protocol.TField("nrAvailableSeats", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField NR_SOLD_SEATS_FIELD_DESC = new org.apache.thrift.protocol.TField("nrSoldSeats", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField ARTIST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("artistName", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ShowDTOStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ShowDTOTupleSchemeFactory();

    public int id; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String dataTimp; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String location; // required
    public int nrAvailableSeats; // required
    public int nrSoldSeats; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String artistName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ID((short)1, "id"),
        DATA_TIMP((short)2, "dataTimp"),
        LOCATION((short)3, "location"),
        NR_AVAILABLE_SEATS((short)4, "nrAvailableSeats"),
        NR_SOLD_SEATS((short)5, "nrSoldSeats"),
        ARTIST_NAME((short)6, "artistName");

        private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

        static {
            for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // ID
                    return ID;
                case 2: // DATA_TIMP
                    return DATA_TIMP;
                case 3: // LOCATION
                    return LOCATION;
                case 4: // NR_AVAILABLE_SEATS
                    return NR_AVAILABLE_SEATS;
                case 5: // NR_SOLD_SEATS
                    return NR_SOLD_SEATS;
                case 6: // ARTIST_NAME
                    return ARTIST_NAME;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.apache.thrift.annotation.Nullable
        public static _Fields findByName(java.lang.String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final java.lang.String _fieldName;

        _Fields(short thriftId, java.lang.String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private static final int __NRAVAILABLESEATS_ISSET_ID = 1;
    private static final int __NRSOLDSEATS_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.DATA_TIMP, new org.apache.thrift.meta_data.FieldMetaData("dataTimp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.NR_AVAILABLE_SEATS, new org.apache.thrift.meta_data.FieldMetaData("nrAvailableSeats", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NR_SOLD_SEATS, new org.apache.thrift.meta_data.FieldMetaData("nrSoldSeats", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.ARTIST_NAME, new org.apache.thrift.meta_data.FieldMetaData("artistName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShowDTO.class, metaDataMap);
    }

    public ShowDTO() {
    }

    public ShowDTO(
            int id,
            java.lang.String dataTimp,
            java.lang.String location,
            int nrAvailableSeats,
            int nrSoldSeats,
            java.lang.String artistName)
    {
        this();
        this.id = id;
        setIdIsSet(true);
        this.dataTimp = dataTimp;
        this.location = location;
        this.nrAvailableSeats = nrAvailableSeats;
        setNrAvailableSeatsIsSet(true);
        this.nrSoldSeats = nrSoldSeats;
        setNrSoldSeatsIsSet(true);
        this.artistName = artistName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ShowDTO(ShowDTO other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        if (other.isSetDataTimp()) {
            this.dataTimp = other.dataTimp;
        }
        if (other.isSetLocation()) {
            this.location = other.location;
        }
        this.nrAvailableSeats = other.nrAvailableSeats;
        this.nrSoldSeats = other.nrSoldSeats;
        if (other.isSetArtistName()) {
            this.artistName = other.artistName;
        }
    }

    public ShowDTO deepCopy() {
        return new ShowDTO(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        this.dataTimp = null;
        this.location = null;
        setNrAvailableSeatsIsSet(false);
        this.nrAvailableSeats = 0;
        setNrSoldSeatsIsSet(false);
        this.nrSoldSeats = 0;
        this.artistName = null;
    }

    public int getId() {
        return this.id;
    }

    public ShowDTO setId(int id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    public void unsetId() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDataTimp() {
        return this.dataTimp;
    }

    public ShowDTO setDataTimp(@org.apache.thrift.annotation.Nullable java.lang.String dataTimp) {
        this.dataTimp = dataTimp;
        return this;
    }

    public void unsetDataTimp() {
        this.dataTimp = null;
    }

    /** Returns true if field dataTimp is set (has been assigned a value) and false otherwise */
    public boolean isSetDataTimp() {
        return this.dataTimp != null;
    }

    public void setDataTimpIsSet(boolean value) {
        if (!value) {
            this.dataTimp = null;
        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getLocation() {
        return this.location;
    }

    public ShowDTO setLocation(@org.apache.thrift.annotation.Nullable java.lang.String location) {
        this.location = location;
        return this;
    }

    public void unsetLocation() {
        this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
        return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
        if (!value) {
            this.location = null;
        }
    }

    public int getNrAvailableSeats() {
        return this.nrAvailableSeats;
    }

    public ShowDTO setNrAvailableSeats(int nrAvailableSeats) {
        this.nrAvailableSeats = nrAvailableSeats;
        setNrAvailableSeatsIsSet(true);
        return this;
    }

    public void unsetNrAvailableSeats() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NRAVAILABLESEATS_ISSET_ID);
    }

    /** Returns true if field nrAvailableSeats is set (has been assigned a value) and false otherwise */
    public boolean isSetNrAvailableSeats() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NRAVAILABLESEATS_ISSET_ID);
    }

    public void setNrAvailableSeatsIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NRAVAILABLESEATS_ISSET_ID, value);
    }

    public int getNrSoldSeats() {
        return this.nrSoldSeats;
    }

    public ShowDTO setNrSoldSeats(int nrSoldSeats) {
        this.nrSoldSeats = nrSoldSeats;
        setNrSoldSeatsIsSet(true);
        return this;
    }

    public void unsetNrSoldSeats() {
        __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NRSOLDSEATS_ISSET_ID);
    }

    /** Returns true if field nrSoldSeats is set (has been assigned a value) and false otherwise */
    public boolean isSetNrSoldSeats() {
        return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NRSOLDSEATS_ISSET_ID);
    }

    public void setNrSoldSeatsIsSet(boolean value) {
        __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NRSOLDSEATS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getArtistName() {
        return this.artistName;
    }

    public ShowDTO setArtistName(@org.apache.thrift.annotation.Nullable java.lang.String artistName) {
        this.artistName = artistName;
        return this;
    }

    public void unsetArtistName() {
        this.artistName = null;
    }

    /** Returns true if field artistName is set (has been assigned a value) and false otherwise */
    public boolean isSetArtistName() {
        return this.artistName != null;
    }

    public void setArtistNameIsSet(boolean value) {
        if (!value) {
            this.artistName = null;
        }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                } else {
                    setId((java.lang.Integer)value);
                }
                break;

            case DATA_TIMP:
                if (value == null) {
                    unsetDataTimp();
                } else {
                    setDataTimp((java.lang.String)value);
                }
                break;

            case LOCATION:
                if (value == null) {
                    unsetLocation();
                } else {
                    setLocation((java.lang.String)value);
                }
                break;

            case NR_AVAILABLE_SEATS:
                if (value == null) {
                    unsetNrAvailableSeats();
                } else {
                    setNrAvailableSeats((java.lang.Integer)value);
                }
                break;

            case NR_SOLD_SEATS:
                if (value == null) {
                    unsetNrSoldSeats();
                } else {
                    setNrSoldSeats((java.lang.Integer)value);
                }
                break;

            case ARTIST_NAME:
                if (value == null) {
                    unsetArtistName();
                } else {
                    setArtistName((java.lang.String)value);
                }
                break;

        }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return getId();

            case DATA_TIMP:
                return getDataTimp();

            case LOCATION:
                return getLocation();

            case NR_AVAILABLE_SEATS:
                return getNrAvailableSeats();

            case NR_SOLD_SEATS:
                return getNrSoldSeats();

            case ARTIST_NAME:
                return getArtistName();

        }
        throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new java.lang.IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case DATA_TIMP:
                return isSetDataTimp();
            case LOCATION:
                return isSetLocation();
            case NR_AVAILABLE_SEATS:
                return isSetNrAvailableSeats();
            case NR_SOLD_SEATS:
                return isSetNrSoldSeats();
            case ARTIST_NAME:
                return isSetArtistName();
        }
        throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
        if (that == null)
            return false;
        if (that instanceof ShowDTO)
            return this.equals((ShowDTO)that);
        return false;
    }

    public boolean equals(ShowDTO that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_id = true;
        boolean that_present_id = true;
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id))
                return false;
            if (this.id != that.id)
                return false;
        }

        boolean this_present_dataTimp = true && this.isSetDataTimp();
        boolean that_present_dataTimp = true && that.isSetDataTimp();
        if (this_present_dataTimp || that_present_dataTimp) {
            if (!(this_present_dataTimp && that_present_dataTimp))
                return false;
            if (!this.dataTimp.equals(that.dataTimp))
                return false;
        }

        boolean this_present_location = true && this.isSetLocation();
        boolean that_present_location = true && that.isSetLocation();
        if (this_present_location || that_present_location) {
            if (!(this_present_location && that_present_location))
                return false;
            if (!this.location.equals(that.location))
                return false;
        }

        boolean this_present_nrAvailableSeats = true;
        boolean that_present_nrAvailableSeats = true;
        if (this_present_nrAvailableSeats || that_present_nrAvailableSeats) {
            if (!(this_present_nrAvailableSeats && that_present_nrAvailableSeats))
                return false;
            if (this.nrAvailableSeats != that.nrAvailableSeats)
                return false;
        }

        boolean this_present_nrSoldSeats = true;
        boolean that_present_nrSoldSeats = true;
        if (this_present_nrSoldSeats || that_present_nrSoldSeats) {
            if (!(this_present_nrSoldSeats && that_present_nrSoldSeats))
                return false;
            if (this.nrSoldSeats != that.nrSoldSeats)
                return false;
        }

        boolean this_present_artistName = true && this.isSetArtistName();
        boolean that_present_artistName = true && that.isSetArtistName();
        if (this_present_artistName || that_present_artistName) {
            if (!(this_present_artistName && that_present_artistName))
                return false;
            if (!this.artistName.equals(that.artistName))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + id;

        hashCode = hashCode * 8191 + ((isSetDataTimp()) ? 131071 : 524287);
        if (isSetDataTimp())
            hashCode = hashCode * 8191 + dataTimp.hashCode();

        hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
        if (isSetLocation())
            hashCode = hashCode * 8191 + location.hashCode();

        hashCode = hashCode * 8191 + nrAvailableSeats;

        hashCode = hashCode * 8191 + nrSoldSeats;

        hashCode = hashCode * 8191 + ((isSetArtistName()) ? 131071 : 524287);
        if (isSetArtistName())
            hashCode = hashCode * 8191 + artistName.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(ShowDTO other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetDataTimp()).compareTo(other.isSetDataTimp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDataTimp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataTimp, other.dataTimp);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLocation()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetNrAvailableSeats()).compareTo(other.isSetNrAvailableSeats());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNrAvailableSeats()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nrAvailableSeats, other.nrAvailableSeats);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetNrSoldSeats()).compareTo(other.isSetNrSoldSeats());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNrSoldSeats()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nrSoldSeats, other.nrSoldSeats);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = java.lang.Boolean.valueOf(isSetArtistName()).compareTo(other.isSetArtistName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetArtistName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artistName, other.artistName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("ShowDTO(");
        boolean first = true;

        sb.append("id:");
        sb.append(this.id);
        first = false;
        if (!first) sb.append(", ");
        sb.append("dataTimp:");
        if (this.dataTimp == null) {
            sb.append("null");
        } else {
            sb.append(this.dataTimp);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("location:");
        if (this.location == null) {
            sb.append("null");
        } else {
            sb.append(this.location);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("nrAvailableSeats:");
        sb.append(this.nrAvailableSeats);
        first = false;
        if (!first) sb.append(", ");
        sb.append("nrSoldSeats:");
        sb.append(this.nrSoldSeats);
        first = false;
        if (!first) sb.append(", ");
        sb.append("artistName:");
        if (this.artistName == null) {
            sb.append("null");
        } else {
            sb.append(this.artistName);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ShowDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ShowDTOStandardScheme getScheme() {
            return new ShowDTOStandardScheme();
        }
    }

    private static class ShowDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<ShowDTO> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ShowDTO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.id = iprot.readI32();
                            struct.setIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // DATA_TIMP
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.dataTimp = iprot.readString();
                            struct.setDataTimpIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // LOCATION
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.location = iprot.readString();
                            struct.setLocationIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // NR_AVAILABLE_SEATS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.nrAvailableSeats = iprot.readI32();
                            struct.setNrAvailableSeatsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // NR_SOLD_SEATS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.nrSoldSeats = iprot.readI32();
                            struct.setNrSoldSeatsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // ARTIST_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.artistName = iprot.readString();
                            struct.setArtistNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ShowDTO struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ID_FIELD_DESC);
            oprot.writeI32(struct.id);
            oprot.writeFieldEnd();
            if (struct.dataTimp != null) {
                oprot.writeFieldBegin(DATA_TIMP_FIELD_DESC);
                oprot.writeString(struct.dataTimp);
                oprot.writeFieldEnd();
            }
            if (struct.location != null) {
                oprot.writeFieldBegin(LOCATION_FIELD_DESC);
                oprot.writeString(struct.location);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(NR_AVAILABLE_SEATS_FIELD_DESC);
            oprot.writeI32(struct.nrAvailableSeats);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(NR_SOLD_SEATS_FIELD_DESC);
            oprot.writeI32(struct.nrSoldSeats);
            oprot.writeFieldEnd();
            if (struct.artistName != null) {
                oprot.writeFieldBegin(ARTIST_NAME_FIELD_DESC);
                oprot.writeString(struct.artistName);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ShowDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
        public ShowDTOTupleScheme getScheme() {
            return new ShowDTOTupleScheme();
        }
    }

    private static class ShowDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<ShowDTO> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ShowDTO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet optionals = new java.util.BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetDataTimp()) {
                optionals.set(1);
            }
            if (struct.isSetLocation()) {
                optionals.set(2);
            }
            if (struct.isSetNrAvailableSeats()) {
                optionals.set(3);
            }
            if (struct.isSetNrSoldSeats()) {
                optionals.set(4);
            }
            if (struct.isSetArtistName()) {
                optionals.set(5);
            }
            oprot.writeBitSet(optionals, 6);
            if (struct.isSetId()) {
                oprot.writeI32(struct.id);
            }
            if (struct.isSetDataTimp()) {
                oprot.writeString(struct.dataTimp);
            }
            if (struct.isSetLocation()) {
                oprot.writeString(struct.location);
            }
            if (struct.isSetNrAvailableSeats()) {
                oprot.writeI32(struct.nrAvailableSeats);
            }
            if (struct.isSetNrSoldSeats()) {
                oprot.writeI32(struct.nrSoldSeats);
            }
            if (struct.isSetArtistName()) {
                oprot.writeString(struct.artistName);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ShowDTO struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            java.util.BitSet incoming = iprot.readBitSet(6);
            if (incoming.get(0)) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.dataTimp = iprot.readString();
                struct.setDataTimpIsSet(true);
            }
            if (incoming.get(2)) {
                struct.location = iprot.readString();
                struct.setLocationIsSet(true);
            }
            if (incoming.get(3)) {
                struct.nrAvailableSeats = iprot.readI32();
                struct.setNrAvailableSeatsIsSet(true);
            }
            if (incoming.get(4)) {
                struct.nrSoldSeats = iprot.readI32();
                struct.setNrSoldSeatsIsSet(true);
            }
            if (incoming.get(5)) {
                struct.artistName = iprot.readString();
                struct.setArtistNameIsSet(true);
            }
        }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
        return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

